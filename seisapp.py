import git
from git import Repo
from git.exc import GitCommandError

repo_url = "https://github.com/avk256/seisproc.git"
clone_path = "./seisproc"

try:
    Repo.clone_from(repo_url, clone_path)
    print("–†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π —É—Å–ø—ñ—à–Ω–æ –∫–ª–æ–Ω–æ–≤–∞–Ω–æ!")
except GitCommandError as e:
    print("‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é")

import seisproc.seisproc as ssp

import streamlit as st
import pandas as pd
import numpy as np

import statsmodels

@st.cache_data
def load_file(file_name):
    # st.write("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...")  # –¶–µ –±—É–¥–µ –≤–∏–¥–Ω–æ –ª–∏—à–µ 1 —Ä–∞–∑
    df = pd.read_csv(file_name, header=None, sep=';')
    df.columns = ['X1','Y11','Y12','Z1','X2','Y21','Y22','Z2','X3','Y31','Y32','Z3']
    return df

st.set_page_config(page_title="SeisApp", layout="wide")
st.title("–ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö —Å–µ–π—Å–º–æ–º–µ—Ç—Ä—ñ–≤")

if "counter" not in st.session_state:
    st.session_state.count = 0

print(st.session_state.count)
# === –ì–ª–æ–±–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, —è–∫—ñ –≤–ø–ª–∏–≤–∞—é—Ç—å –Ω–∞ —ñ–Ω—à—ñ –≤–∫–ª–∞–¥–∫–∏ ===
with st.sidebar:
    st.header("‚öôÔ∏è –ó–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
    
    st.title("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Ä—ñ–π –¥–∞–Ω–∏—Ö")

    
    # 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Ö CSV —Ñ–∞–π–ª—ñ–≤
    uploaded_files = st.file_uploader(
        "–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∞–±–æ –∫—ñ–ª—å–∫–∞ CSV-—Ñ–∞–π–ª—ñ–≤, —è–∫—ñ –º—ñ—Å—Ç—è—Ç—å –¥–∞–Ω—ñ —Å–µ—Ä—ñ–π",
        type="csv",
        accept_multiple_files=True
    )

    dfs = {}  # –∫–ª—é—á: —ñ–º'—è —Ñ–∞–π–ª—É, –∑–Ω–∞—á–µ–Ω–Ω—è: DataFrame
    
    # if st.button("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª–∏"):
    # –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —É —Å–ª–æ–≤–Ω–∏–∫ DataFrame'—ñ–≤
    if "dfs" not in st.session_state:
        st.session_state.dfs = dfs
    if uploaded_files and len(st.session_state.dfs)==0:
        for file in uploaded_files:
            dfs[file.name] = load_file(file)
        st.write("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤...")    
        st.session_state.dfs = dfs
        st.session_state.count = st.session_state.count + 1  

    if len(st.session_state.dfs)>0:
        
        
        fs = st.number_input("üîª –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü—ñ—ó", min_value=800.0, value=800.0, step=10.0, key='freq')
        min_freq = 0
        min_freq = 0

        # ================ –°–º—É–≥–æ–≤–∏–π —Ñ—ñ–ª—å—Ç—Ä =====================================
        
        st.subheader("üéöÔ∏è –°–º—É–≥–æ–≤–∏–π —Ñ—ñ–ª—å—Ç—Ä")
        # –ü–æ–ª—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó —Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —á–∞—Å—Ç–æ—Ç–∏
        col1, col2 = st.columns(2)
        with col1:
            min_freq = st.number_input("üîª min —á–∞—Å—Ç–æ—Ç–∞", min_value=0.0, value=20.0, step=10.0, key='min_freq')
        with col2:
            max_freq = st.number_input("üî∫ max —á–∞—Å—Ç–æ—Ç–∞", min_value=0.0, value=50.0, step=10.0, key='max_freq')
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        if st.button("‚öôÔ∏è –§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏"):
            st.success(f"–ó–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è —Ñ—ñ–ª—å—Ç—Ä: –≤—ñ–¥ {min_freq} –¥–æ {max_freq} –ì—Ü")
            # –¢—É—Ç –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
            for key, data in st.session_state.dfs.items():
                st.session_state.dfs[key] = ssp.filter_dataframe(data, min_freq, max_freq, fs)
                
        

        # ================== –ß–∞—Å–æ–≤–µ –≤—ñ–∫–Ω–æ =====================================
        
        st.subheader("üéöÔ∏è –ß–∞—Å–æ–≤–µ –≤—ñ–∫–Ω–æ")
        # –ü–æ–ª—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó —Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —á–∞—Å—Ç–æ—Ç–∏
        col1, col2 = st.columns(2)
        with col1:
            min_time = st.number_input("üîª min —á–∞—Å", min_value=0.0, value=1.0, step=1.0, key='min_time')
        with col2:
            max_time = st.number_input("üî∫ max —á–∞—Å", min_value=0.0, value=10.0, step=1.0, key='max_time')
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        if st.button("‚öôÔ∏è –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –≤—ñ–∫–Ω–æ"):
            st.success(f"–ó–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è —á–∞—Å–æ–≤–µ –≤—ñ–∫–Ω–æ: –≤—ñ–¥ {min_time} –¥–æ {max_time} —Å")
            # –¢—É—Ç –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
            for key, data in st.session_state.dfs.items():
                dfs[key] = ssp.cut_dataframe_time_window(data, fs, min_time, max_time)
                
            st.session_state.dfs = dfs
            print(st.session_state.dfs[key].describe())
            # breakpoint()
        # ===================== –î–µ—Ç—Ä–µ–Ω–¥ =======================================
   
        st.subheader("üéöÔ∏è –û–ø–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —Ç—Ä–µ–Ω–¥—É")
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É –¥–µ—Ç—Ä–µ–Ω–¥—É
        if st.button("‚öôÔ∏è –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –¥–µ—Ç—Ä–µ–Ω–¥"):
            st.success("–ó–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–µ—Ç—Ä–µ–Ω–¥")
            # –¢—É—Ç –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
            for key, data in st.session_state.dfs.items():
                print(data.describe())
                # breakpoint()

                st.session_state.dfs[key] = ssp.detrend_dataframe(data)
    
    
    
# dfs = dfs

# if st.button("‚öôÔ∏è –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏"):


# === –í–∫–ª–∞–¥–∫–∏ ===
tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8, tab9, tab10 = st.tabs(["üìà –î–∞–Ω—ñ", "üìä –ì—Ä–∞—Ñ—ñ–∫–∏", "–°–ø–µ–∫—Ç—Ä", "PSD", "RMS –∑–∞ PSD",  "–ö—Ä–æ—Å-–∫–æ—Ä–µ–ª—è—Ü—ñ—è", "–ö–æ–≥–µ—Ä–µ–Ω—Ç–Ω—ñ—Å—Ç—å", "–ö–æ–≥–µ—Ä–µ–Ω—Ç–Ω–µ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è", "–£—è–≤–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ—ó –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ", "–ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∞ –º–æ–¥–µ–ª—å —Å–æ–Ω–∞—Ä–∞"])



# === –í–∫–ª–∞–¥–∫–∞ 1: –î–∞–Ω—ñ ===
with tab1:
    
        # 3. –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        st.success(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(dfs)} —Ñ–∞–π–ª—ñ–≤")
        
        for filename, df in st.session_state.dfs.items():
            st.subheader(f"üìÑ –§–∞–π–ª: {filename}")
            st.write(df.head())
    
            # –î–æ–¥–∞—Ç–∫–æ–≤–æ: —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
            st.text(f"–§–æ—Ä–º–∞: {df.shape[0]} —Ä—è–¥–∫—ñ–≤ √ó {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
            st.write(df.describe())
            
    


# === –í–∫–ª–∞–¥–∫–∞ 2: –ì—Ä–∞—Ñ—ñ–∫–∏ ===
with tab2:
    
    
    st.subheader("–ì—Ä–∞—Ñ—ñ–∫–∏ —É –¥–æ–º–µ–Ω—ñ –∞–º–ø–ª—ñ—Ç—É–¥–∞-—á–∞—Å")
    n_cols = int(st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è", min_value=0.0, value=3.0, step=1.0, key='n_col'))
    selected = st.multiselect("–û–±–µ—Ä—ñ—Ç—å –≥–µ–æ—Ñ–æ–Ω–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", ['X1','Y11','Y12','Z1','X2','Y21','Y22','Z2','X3','Y31','Y32','Z3'], default=['X1', 'X2', 'X3', 'Z1', 'Z2', 'Z3'], key='sel_geoph')
    one_plot = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –≥–µ–æ—Ñ–æ–Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º—É –≥—Ä–∞—Ñ—ñ–∫—É", value=True, key='one_plot')
    
    
    if len(st.session_state.dfs)>0:
        for filename, data in st.session_state.dfs.items():
            st.subheader(filename)
            # st.write(filename)
            # st.caption(filename)
            
            if all(elem in list(data.columns) for elem in selected):
            
                if one_plot:
                    st.plotly_chart(ssp.plot_time_signals(data, fs, n_cols=n_cols, threshold=0.5, columns=selected, mode="plotly_one"), use_container_width=True, key='plot_one'+filename)
                else:
                    st.plotly_chart(ssp.plot_time_signals(data, fs, n_cols=n_cols, threshold=0.5, columns=selected, mode="plotly"), use_container_width=True, key='plot_many'+filename)
    

# === –í–∫–ª–∞–¥–∫–∞ 3: –°–ø–µ–∫—Ç—Ä ===
with tab3:
    st.subheader("–°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–∏. –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —É –¥–æ–º–µ–Ω—ñ —á–∞—Å—Ç–æ—Ç–∞-—á–∞—Å")
    
    with st.form("spectr_window_form", clear_on_submit=False):
        seg_len_s = st.number_input("–î–æ–≤–∂–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–∏, —Å", min_value=0.0, value=None, step=0.1, key='nperseg')
        overlap_s = st.number_input("–í–µ–ª–∏—á–∏–Ω–∞ –ø–µ—Ä–µ–∫—Ä–∏—Ç—Ç—è –º—ñ–∂ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏, —Å", min_value=0.0, value=None, step=0.01, key='noverlap')
        submitted = st.form_submit_button("‚öôÔ∏è –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")
    
    
    
    if submitted and len(st.session_state.dfs)>0:
        for filename, data in st.session_state.dfs.items():
            st.subheader(filename)
            
            if all(elem in list(data.columns) for elem in selected):
                st.pyplot(ssp.spectr_plot(data, fs, n_cols=n_cols, columns=selected,seg_len_s=seg_len_s, overlap_s=overlap_s), use_container_width=True)
    
# === –í–∫–ª–∞–¥–∫–∞ 4: PSD ===
with tab4:
    st.subheader("–°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–∞ —â—ñ–ª—å–Ω—ñ—Å—Ç—å –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ (PSD)")
    db_scale = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –≤ —à–∫–∞–ª—ñ –¥–µ—Ü–∏–±–µ–ª, –¥–ë", value=True, key='db_scale1')
    
    if len(st.session_state.dfs)>0:
        for filename, data in st.session_state.dfs.items():
            st.subheader(filename)
            if all(elem in list(data.columns) for elem in selected):
                if db_scale:
                    st.plotly_chart(ssp.psd_plot_df(data, fs=fs, n_cols=n_cols, columns=selected, mode='plotly',scale='db'), use_container_width=True, key='plot_psd1'+filename)
                else:
                    st.plotly_chart(ssp.psd_plot_df(data, fs=fs, n_cols=n_cols, columns=selected, mode='plotly',scale='energy'), use_container_width=True, key='plot_psd2'+filename)

# === –í–∫–ª–∞–¥–∫–∞ 5: RMS –∑–∞ PSD ===
with tab5:
    st.subheader("–ì—Ä–∞—Ñ—ñ–∫ PSD")
    
    if len(st.session_state.dfs)>0:
        selected_ser_psd = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", list(st.session_state.dfs.keys()),key="sel_rms_psd1")
        selected_geoph_psd = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –≥–µ–æ—Ñ–æ–Ω–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", ['X1','Y11','Y12','Z1','X2','Y21','Y22','Z2','X3','Y31','Y32','Z3'],key="sel_rms_psd2")
    
        db_scale_psd = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –≤ —à–∫–∞–ª—ñ –¥–µ—Ü–∏–±–µ–ª, –¥–ë", value=False, key='db_scale_rms_psd')
        if db_scale_psd:
            st.plotly_chart(ssp.psd_plot_df(st.session_state.dfs[selected_ser_psd], fs=fs, n_cols=1, columns=[selected_geoph_psd], mode='plotly', scale='db'), use_container_width=True,key="plot_rms_psd1")
            f, Pxx = ssp.psd_plot_df(st.session_state.dfs[selected_ser_psd], fs=fs, n_cols=1, columns=[selected_geoph_psd], mode='matrix', scale='db') 
        else:
            st.plotly_chart(ssp.psd_plot_df(st.session_state.dfs[selected_ser_psd], fs=fs, n_cols=1, columns=[selected_geoph_psd], mode='plotly', scale='energy'), use_container_width=True,key="plot_rms_psd2")
            f, Pxx = ssp.psd_plot_df(st.session_state.dfs[selected_ser_psd], fs=fs, n_cols=1, columns=[selected_geoph_psd], mode='matrix', scale='energy') 
    
        
        st.subheader("üéöÔ∏è –°–µ—Ä–µ–¥–Ω—î –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è PSD –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ")
    
        with st.form("rms_psd_window_form", clear_on_submit=False):
            # –ü–æ–ª—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó —Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —á–∞—Å—Ç–æ—Ç–∏
            col1, col2 = st.columns(2)
            with col1:
                min_freq_rms_psd = st.number_input("üîª –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞", min_value=0.0, value=20.0, step=1.0, key='min_freq_rms_psd')
                
            with col2:
                max_freq_rms_psd = st.number_input("üî∫ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞", min_value=0.0, value=50.0, step=1.0, key='max_freq_rms_psd')
            submitted = st.form_submit_button("‚öôÔ∏è –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏")
            
            if submitted:
                print(f[0])
                print(Pxx[0])
                rms_psd, range_freq_val = ssp.rms_in_band(f[0], Pxx[0], min_freq_rms_psd, max_freq_rms_psd)
                st.subheader(f"üéöÔ∏è RMS PSD –¥–æ—Ä—ñ–≤–Ω—é—î {rms_psd} –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ –≤—ñ–¥ {range_freq_val[0]} –ì—Ü –¥–æ {range_freq_val[1]} –ì—Ü")
    

# === –í–∫–ª–∞–¥–∫–∞ 6: –ö—Ä–æ—Å-–∫–æ—Ä–µ–ª—è—Ü—ñ—è ===
with tab6:
    st.subheader("–ó–∞—Ç—Ä–∏–º–∫–∏ –≤ —Å–∏–≥–Ω–∞–ª–∞—Ö –≥–µ–æ—Ñ–æ–Ω—ñ–≤, –æ–±—á–∏—Å–ª–µ–Ω—ñ –∑–∞ –º–µ—Ç–æ–¥–æ–º –∫—Ä–æ—Å-–∫–æ—Ä–µ–ª—è—Ü—ñ—ó")
    # n_min = st.number_input("–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É", min_value=-100.0, value=-0.07, step=0.01, key='n_min')
    # n_max = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É", min_value=-100.0, value=-0.01, step=0.01, key='n_max')
    # p_min = st.number_input("–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É", min_value=0.0, value=0.01, step=0.01, key='p_min')
    # p_max = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É", min_value=0.0, value=0.07, step=0.01, key='p_max')
    selected = st.multiselect("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø–∏ –≥–µ–æ—Ñ–æ–Ω—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", ['X', 'Y', 'Z'], default=['X', 'Z'], key='sel_geoph_cros')
    # delays_dict = {key: None for key in selected}
    
    if len(st.session_state.dfs)>0:
        for filename, data in st.session_state.dfs.items():
            st.subheader(filename)
            
            # if all(elem in list(data.columns) for elem in selected):
            # X, Y, Z = ssp.cross_corr_crossval_from_df(data, fs, verbose=False, allowed_lag_ranges_s=[(n_min, n_max),(p_min, p_max)])
            X, Y, Z = ssp.cross_corr_crossval_from_df(data, fs, verbose=False)
            delays_dict = {name: globals()[name] for name in selected}
            st.pyplot(ssp.plot_multiple_delay_matrices(delays_dict))
            
# === –í–∫–ª–∞–¥–∫–∞ 7: –ö–æ–≥–µ—Ä–µ–Ω—Ç–Ω—ñ—Å—Ç—å ===
with tab7:
    st.subheader("–ö–æ–≥–µ—Ä–µ–Ω—Ç–Ω—ñ—Å—Ç—å –º—ñ–∂ –¥–≤–æ–º–∞ —Å–∏–≥–Ω–∞–ª–∞–º–∏")

    if len(st.session_state.dfs)>0:

        st.write("1–π —Å–∏–≥–Ω–∞–ª")
        selected_ser1 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", list(st.session_state.dfs.keys()),key="coh_sel_ser1")
        selected_seism1 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø–∏ –≥–µ–æ—Ñ–æ–Ω—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", ['X1','Y11','Y12','Z1','X2','Y21','Y22','Z2','X3','Y31','Y32','Z3'],key="coh_sel_seism1")
        st.write("2–π —Å–∏–≥–Ω–∞–ª")
        selected_ser2 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", list(st.session_state.dfs.keys()),key="coh_sel_ser2")
        selected_seism2 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø–∏ –≥–µ–æ—Ñ–æ–Ω—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", ['X1','Y11','Y12','Z1','X2','Y21','Y22','Z2','X3','Y31','Y32','Z3'],key="coh_sel_seism2")
        st.plotly_chart(ssp.plot_coherence(st.session_state.dfs[selected_ser1][selected_seism1], st.session_state.dfs[selected_ser2][selected_seism2], fs, f"{selected_ser1}, {selected_seism1}", f"{selected_ser2}, {selected_seism2}", mode='plotly'), use_container_width=True, key='plot_coher')
        
        

# === –í–∫–ª–∞–¥–∫–∞ 8: –ö–æ–≥–µ—Ä–µ–Ω—Ç–Ω–µ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è ===
with tab8:
    
    
    st.subheader("–ö–æ–≥–µ—Ä–µ–Ω—Ç–Ω–µ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —à—É–º—É")
    # st.write(st.session_state.dfs.keys())
    
    subs_mode = st.radio(
    "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è:",
    ["–û–¥–Ω–∞ —Å–µ—Ä—ñ—è", "–î–≤—ñ —Å–µ—Ä—ñ—ó"],
    index=0  # –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–∏–±—Ä–∞–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç
    )
    
    data_geoph = {}
    
    if "plot_flag" not in st.session_state:
        st.session_state.plot_flag = False

    if "noisy_sig_plot" not in st.session_state:
        st.session_state.noisy_sig_plot = []
        
    if "ref_noise_plot" not in st.session_state:
        st.session_state.ref_noise_plot = []
    
    if "res_signal" not in st.session_state:
        st.session_state.res_signal = []
        
    dfs_vpf = {}  # –∫–ª—é—á: —ñ–º'—è —Ñ–∞–π–ª—É, –∑–Ω–∞—á–µ–Ω–Ω—è: DataFrame
    
    # if st.button("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª–∏"):
    # –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —É —Å–ª–æ–≤–Ω–∏–∫ DataFrame'—ñ–≤
    if "dfs_vpf" not in st.session_state:
        st.session_state.dfs_vpf = dfs_vpf
        
    if "selected_ser1" not in st.session_state:
        st.session_state.selected_ser1 = 0
    

    if subs_mode == "–û–¥–Ω–∞ —Å–µ—Ä—ñ—è":
        
        st.write("C–∏–≥–Ω–∞–ª")
        selected_ser1 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", list(st.session_state.dfs.keys()),key="sel_sub_one")
        st.write("–ì–µ–æ—Ñ–æ–Ω–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É")
        selected_geoph = st.multiselect("–û–±–µ—Ä—ñ—Ç—å –≥–µ–æ—Ñ–æ–Ω–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", ['X1','Y11','Y12','Z1','X2','Y21','Y22','Z2','X3','Y31','Y32','Z3'], default=['X1', 'X2', 'X3', 'Z1', 'Z2', 'Z3'],key="sel_subs")
        
        st.subheader("üéöÔ∏è –ß–∞—Å–æ–≤—ñ –≤—ñ–∫–Ω–∞ —Å–∏–≥–Ω–∞–ª—É —Ç–∞ —à—É–º—É")
        
        with st.form("subs_window_form", clear_on_submit=False):
            
                      
 

            # print(selected_ser1)
            # breakpoint()


            if selected_ser1:
                st.subheader("–û–±—Ä–∞–Ω–æ —Å–µ—Ä—ñ—é "+selected_ser1)
            
            

            # –ü–æ–ª—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó —Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —á–∞—Å—Ç–æ—Ç–∏
            col1, col2 = st.columns(2)
            with col1:
                subs_min_time_s = st.number_input("üîª –ü–æ—á–∞—Ç–æ–∫ —Å–∏–≥–Ω–∞–ª—É", min_value=0.0, value=2.53, step=0.1, key='subs_min_time_sig')
            with col2:
                subs_max_time_s = st.number_input("üî∫ –ö—ñ–Ω–µ—Ü—å —Å–∏–≥–Ω–∞–ª—É", min_value=0.0, value=2.63, step=0.1, key='subs_max_time_sig')
            col1, col2 = st.columns(2)
            with col1:
                subs_min_time_n = st.number_input("üîª –ü–æ—á–∞—Ç–æ–∫ —à—É–º—É", min_value=0.0, value=2.63, step=0.1, key='subs_min_time_noise')
            with col2:
                subs_max_time_n = st.number_input("üî∫ –ö—ñ–Ω–µ—Ü—å —à—É–º—É", min_value=0.0, value=2.74, step=0.1, key='subs_max_time_noise')
            
            sig_len = subs_max_time_s-subs_min_time_s
            noise_len = subs_max_time_n-subs_min_time_n
            st.write(f"–î–æ–≤–∂–∏–Ω–∞ —Å–∏–≥–Ω–∞–ª—É {sig_len:.4f} c")
            st.write(f"–î–æ–≤–∂–∏–Ω–∞ —à—É–º—É {noise_len:.4f} c")
            
            
            seg_len_s = st.number_input("–î–æ–≤–∂–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–∏, —Å", min_value=0.0, value=0.02, step=0.1, key='subs_nperseg')
            overlap_s = st.number_input("–í–µ–ª–∏—á–∏–Ω–∞ –ø–µ—Ä–µ–∫—Ä–∏—Ç—Ç—è –º—ñ–∂ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏, —Å", min_value=0.0, value=0.018, step=0.01, key='subs_noverlap')
            coherence_threshold = st.number_input("–ü–æ—Ä—ñ–≥ –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—ñ", min_value=0.0, value=0.8, step=0.1, key='subs_coher_thersh')
            
            
          

            plot_figs_s = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –∞–º–ø–ª—ñ—Ç—É–¥–∞-—á–∞—Å –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É", value=False, key='plot_figs_s')
            plot_figs_n = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –∞–º–ø–ª—ñ—Ç—É–¥–∞-—á–∞—Å —à—É–º—É", value=False, key='plot_figs_n')
            plot_figs_r = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –∞–º–ø–ª—ñ—Ç—É–¥–∞-—á–∞—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è", value=False, key='plot_figs_r')
            
            plot_spectr_s = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º—É –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É", value=False, key='plot_spectr_s')
            plot_spectr_n = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º—É —à—É–º—É", value=False, key='plot_spectr_n')
            plot_spectr_r = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è", value=False, key='plot_spectr_r')
            
            plot_psd_s = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ PSD –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É", value=False, key='plot_psd_s')
            plot_psd_n = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ PSD —à—É–º—É", value=False, key='plot_psd_n')
            plot_psd_r = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ PSD —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è", value=False, key='plot_psd_r')
            
            plot_vpf_s = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ VPF –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É", value=False, key='plot_vpf_s')
            plot_vpf_n = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ VPF —à—É–º—É", value=False, key='plot_vpf_n')
            plot_vpf_r = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ VPF —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è", value=False, key='plot_vpf_r')
            
            # print(selected_ser1)
            # breakpoint()
            
            submitted = st.form_submit_button("‚öôÔ∏è –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –≤—ñ–∫–Ω–æ")
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
            
            # print(selected_ser1)
            # print(st.session_state.selected_ser1)
            # breakpoint()            
        if submitted:
            
            st.session_state.selected_ser1 = selected_ser1
            st.write("–û–±—Ä–∞–Ω–æ —Å–µ—Ä—ñ—é "+selected_ser1)
            
            # print(selected_ser1)
            # print(st.session_state.selected_ser1)
            # breakpoint()       
            
            noisy_sig_df = st.session_state.dfs[selected_ser1][selected_geoph]
            noisy_sig_df_cut = ssp.cut_dataframe_time_window(noisy_sig_df, fs=fs, start_time=subs_min_time_s, end_time=subs_max_time_s)
            ref_noise_df_cut = ssp.cut_dataframe_time_window(noisy_sig_df, fs=fs, start_time=subs_min_time_n, end_time=subs_max_time_n)
            ref_noise_df_cut = ref_noise_df_cut[0:len(noisy_sig_df_cut)]
        
        
            for geoph in selected_geoph: #['X1','Y11','Y12','Z1','X2','Y21','Y22','Z2','X3','Y31','Y32','Z3']: 
                signal, _, _, _, _, _, _ = ssp.coherent_subtraction_aligned_with_mask(noisy_sig_df_cut[geoph], 
                                                                             ref_noise_df_cut[geoph], 
                                                                             seg_len_s=seg_len_s, 
                                                                             overlap_s=overlap_s,
                                                                             coherence_threshold=coherence_threshold)
                signal = signal[:len(noisy_sig_df_cut)]
                data_geoph[geoph] = signal
                
            st.session_state.plot_flag = True
            
            cleaned_sig_df = pd.DataFrame(data_geoph)
            st.session_state.dfs[st.session_state.selected_ser1+"_subtract_cut"] = cleaned_sig_df
  
            st.session_state.noisy_sig_plot = noisy_sig_df_cut
            st.session_state.ref_noise_plot = ref_noise_df_cut
            st.session_state.res_signal = cleaned_sig_df
            
            selected_ser1 = None

                
    
    if subs_mode == "–î–≤—ñ —Å–µ—Ä—ñ—ó":

        st.write("1–π —Å–∏–≥–Ω–∞–ª")
        selected_ser1 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", list(st.session_state.dfs.keys()),key="sel_sub1")
        # selected_seism1 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø–∏ –≥–µ–æ—Ñ–æ–Ω—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", ['X1','Y11','Y12','Z1','X2','Y21','Y22','Z2','X3','Y31','Y32','Z3'],key="select12")
        st.write("2–π —Å–∏–≥–Ω–∞–ª (—à—É–º)")
        selected_ser2 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", list(st.session_state.dfs.keys()),key="sel_sub2")        
        st.write("–ì–µ–æ—Ñ–æ–Ω–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É")
        selected_geoph = st.multiselect("–û–±–µ—Ä—ñ—Ç—å –≥–µ–æ—Ñ–æ–Ω–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", ['X1','Y11','Y12','Z1','X2','Y21','Y22','Z2','X3','Y31','Y32','Z3'], default=['X1', 'X2', 'X3', 'Z1', 'Z2', 'Z3'],key="sel_subs")
        




        with st.form("subs_window_form2", clear_on_submit=False):    
            
            
            if selected_ser1:
                st.subheader("–û–±—Ä–∞–Ω–æ —Å–µ—Ä—ñ—é —Å–∏–≥–Ω–∞–ª—É "+selected_ser1)
            if selected_ser2:
                st.subheader("–û–±—Ä–∞–Ω–æ —Å–µ—Ä—ñ—é —à—É–º—É "+selected_ser2)
            
            if len(st.session_state.dfs)>0:
        
                
                
                
                plot_figs_s = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –∞–º–ø–ª—ñ—Ç—É–¥–∞-—á–∞—Å –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É", value=False, key='plot_figs_s2')
                plot_figs_n = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –∞–º–ø–ª—ñ—Ç—É–¥–∞-—á–∞—Å —à—É–º—É", value=False, key='plot_figs_n2')
                plot_figs_r = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –∞–º–ø–ª—ñ—Ç—É–¥–∞-—á–∞—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è", value=False, key='plot_figs_r2')
                
                plot_spectr_s = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º—É –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É", value=False, key='plot_spectr_s2')
                plot_spectr_n = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º—É —à—É–º—É", value=False, key='plot_spectr_n2')
                plot_spectr_r = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è", value=False, key='plot_spectr_r2')
                
                plot_psd_s = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ PSD –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É", value=False, key='plot_psd_s2')
                plot_psd_n = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ PSD —à—É–º—É", value=False, key='plot_psd_n2')
                plot_psd_r = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ PSD —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è", value=False, key='plot_psd_r2')
                
                plot_vpf_s = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ VPF –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É", value=False, key='plot_vpf_s2')
                plot_vpf_n = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ VPF —à—É–º—É", value=False, key='plot_vpf_n2')
                plot_vpf_r = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ VPF —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è", value=False, key='plot_vpf_r2')

                
                
                submitted = st.form_submit_button("‚öôÔ∏è –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")
                
        if submitted:
            
            st.session_state.selected_ser1 = selected_ser1
            # st.session_state.selected_ser2 = selected_ser2
            st.write("–û–±—Ä–∞–Ω–æ —Å–µ—Ä—ñ—é —Å–∏–≥–Ω–∞–ª—É "+selected_ser1)
            st.write("–û–±—Ä–∞–Ω–æ —Å–µ—Ä—ñ—é —à—É–º—É "+selected_ser2)
            
            # print(selected_ser1)
            # print(st.session_state.selected_ser1)
            # breakpoint()       
               
            
            for geoph in selected_geoph: # ['X1','Y11','Y12','Z1','X2','Y21','Y22','Z2','X3','Y31','Y32','Z3']: 
                signal, _, _, _, _, _, _ = ssp.coherent_subtraction_aligned_with_mask(st.session_state.dfs[selected_ser1][geoph], st.session_state.dfs[selected_ser2][geoph], seg_len_s=None, overlap_s=None,coherence_threshold=0.7)
                signal = signal[:len(st.session_state.dfs[selected_ser1][geoph])]
                data_geoph[geoph] = signal
                
           
            st.session_state.plot_flag = True
            
            cleaned_sig_df = pd.DataFrame(data_geoph)
            st.session_state.dfs[selected_ser1+"_subtract"] = df
            
            st.session_state.noisy_sig_plot = st.session_state.dfs[selected_ser1]
            st.session_state.ref_noise_plot = st.session_state.dfs[selected_ser2]
            st.session_state.res_signal = cleaned_sig_df


    
    if st.session_state.plot_flag:
        
        df = ssp.vpf_df(st.session_state.res_signal, fs)                        
        if subs_mode == "–î–≤—ñ —Å–µ—Ä—ñ—ó":
            st.session_state.dfs_vpf[st.session_state.selected_ser1+"_subtract_vpf"] = df
        if subs_mode == "–û–¥–Ω–∞ —Å–µ—Ä—ñ—è":
            st.session_state.dfs_vpf[st.session_state.selected_ser1+"_subtract_cut_vpf"] = df
            
        signal_vpf = ssp.vpf_df(st.session_state.noisy_sig_plot, fs)
        noise_vpf = ssp.vpf_df(st.session_state.ref_noise_plot, fs)                         
        snr_df = ssp.compute_snr_df(signal_vpf, noise_vpf)
        st.subheader("–í—ñ–¥–Ω–æ—à–µ–Ω–Ω—è SNR")
        st.dataframe(snr_df)

    
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ–≥–æ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è")
        if len(df):
            
            st.subheader("–°–µ—Ä—ñ—è —Å–∏–≥–Ω–∞–ª—É: "+st.session_state.selected_ser1)
            if plot_figs_s or plot_figs_n or plot_figs_r:

                st.subheader("–ì—Ä–∞—Ñ—ñ–∫ –∞–º–ø–ª—ñ—Ç—É–¥–∞-—á–∞—Å")
                one_plot_subs = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –≥–µ–æ—Ñ–æ–Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º—É –≥—Ä–∞—Ñ—ñ–∫—É", value=True, key='one_plot_subs')
                
                if plot_figs_s: 
                    st.subheader("–ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª")
                    if one_plot_subs:
                        st.plotly_chart(ssp.plot_time_signals(st.session_state.noisy_sig_plot, fs, n_cols=n_cols, threshold=0.5, columns=selected_geoph, mode="plotly_one"), use_container_width=True, key='plot_one_subs_s'+filename)
                    else:
                        st.plotly_chart(ssp.plot_time_signals(st.session_state.noisy_sig_plot, fs, n_cols=n_cols, threshold=0.5, columns=selected_geoph, mode="plotly"), use_container_width=True, key='plot_many_subs_s'+filename)

                if plot_figs_n: 
                    st.subheader("–®—É–º")
                    if one_plot_subs:
                        st.plotly_chart(ssp.plot_time_signals(st.session_state.ref_noise_plot, fs, n_cols=n_cols, threshold=0.5, columns=selected_geoph, mode="plotly_one"), use_container_width=True, key='plot_one_subs_n'+filename)
                    else:
                        st.plotly_chart(ssp.plot_time_signals(st.session_state.ref_noise_plot, fs, n_cols=n_cols, threshold=0.5, columns=selected_geoph, mode="plotly"), use_container_width=True, key='plot_many_subs_n'+filename)

                if plot_figs_r: 
                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è")
                    if one_plot_subs:
                        st.plotly_chart(ssp.plot_time_signals(st.session_state.res_signal, fs, n_cols=n_cols, threshold=0.5, columns=selected_geoph, mode="plotly_one"), use_container_width=True, key='plot_one_subs_r'+filename)
                    else:
                        st.plotly_chart(ssp.plot_time_signals(st.session_state.res_signal, fs, n_cols=n_cols, threshold=0.5, columns=selected_geoph, mode="plotly"), use_container_width=True, key='plot_many_subs_r'+filename)


            if plot_spectr_s or plot_spectr_n or plot_spectr_r:

                st.subheader("–°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞")
                
                if plot_spectr_s: 
                    st.subheader("–ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª")
                   
                    st.pyplot(ssp.spectr_plot(st.session_state.noisy_sig_plot, fs, n_cols=n_cols, columns=selected_geoph), use_container_width=True)
                   

                if plot_spectr_n: 
                    st.subheader("–®—É–º")
                    
                    st.pyplot(ssp.spectr_plot(st.session_state.ref_noise_plot, fs, n_cols=n_cols, columns=selected_geoph), use_container_width=True)
                    
                if plot_spectr_r: 
                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è")
                    st.pyplot(ssp.spectr_plot(st.session_state.res_signal, fs, n_cols=n_cols, columns=selected_geoph), use_container_width=True)
                    

            if plot_psd_s or plot_psd_n or plot_psd_r:

                st.subheader("–ì—Ä–∞—Ñ—ñ–∫ PSD")
                db_scale_subs = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –≤ —à–∫–∞–ª—ñ –¥–µ—Ü–∏–±–µ–ª, –¥–ë", value=True, key='db_scale_subs')
                
                if plot_psd_s: 
                    st.subheader("–ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª")
                    if db_scale_subs:
                        st.plotly_chart(ssp.psd_plot_df(st.session_state.noisy_sig_plot, fs, n_cols=n_cols, columns=selected_geoph, mode='plotly', scale='db'), use_container_width=True, key='plot_sub_psd1_s'+filename)
                    else:
                        st.plotly_chart(ssp.psd_plot_df(st.session_state.noisy_sig_plot, fs, n_cols=n_cols, columns=selected_geoph, mode='plotly', scale='energy'), use_container_width=True, key='plot_sub_psd2_s'+filename)

                if plot_psd_n: 
                    st.subheader("–®—É–º")
                    if db_scale_subs:
                        st.plotly_chart(ssp.psd_plot_df(st.session_state.ref_noise_plot, fs, n_cols=n_cols, columns=selected_geoph, mode='plotly', scale='db'), use_container_width=True, key='plot_sub_psd1_n'+filename)
                    else:
                        st.plotly_chart(ssp.psd_plot_df(st.session_state.ref_noise_plot, fs, n_cols=n_cols, columns=selected_geoph, mode='plotly', scale='energy'), use_container_width=True, key='plot_sub_psd2_n'+filename)

                if plot_psd_r: 
                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è")
                    if db_scale_subs:
                        st.plotly_chart(ssp.psd_plot_df(st.session_state.res_signal, fs, n_cols=n_cols, columns=selected_geoph, mode='plotly', scale='db'), use_container_width=True, key='plot_sub_psd1_r'+filename)
                    else:
                        st.plotly_chart(ssp.psd_plot_df(st.session_state.res_signal, fs, n_cols=n_cols, columns=selected_geoph, mode='plotly', scale='energy'), use_container_width=True, key='plot_sub_psd2_r'+filename)

            if plot_vpf_s or plot_vpf_n or plot_vpf_r:

                st.subheader("VPF")
                
                
                
                if plot_vpf_s: 
                    st.subheader("–ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª")
                    df = ssp.vpf_df(st.session_state.noisy_sig_plot, fs)
                    st.plotly_chart(ssp.plot_time_signals(df, fs, n_cols=n_cols, threshold=0.5, columns=['im_power1', 'im_power2', 'im_power3'], mode="plotly_one"), use_container_width=True, key='plot_one_vpf_subs_s'+filename)
                   

                if plot_vpf_n: 
                    st.subheader("–®—É–º")
                    df = ssp.vpf_df(st.session_state.ref_noise_plot, fs)
                    st.plotly_chart(ssp.plot_time_signals(df, fs, n_cols=n_cols, threshold=0.5, columns=['im_power1', 'im_power2', 'im_power3'], mode="plotly_one"), use_container_width=True, key='plot_one_vpf_subs_n'+filename)
                    
                if plot_vpf_r: 
                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è")
                    df = ssp.vpf_df(st.session_state.res_signal, fs)
                    st.plotly_chart(ssp.plot_time_signals(df, fs, n_cols=n_cols, threshold=0.5, columns=['im_power1', 'im_power2', 'im_power3'], mode="plotly_one"), use_container_width=True, key='plot_one_vpf_subs_r'+filename)



# === –í–∫–ª–∞–¥–∫–∞ 9: –£—è–≤–Ω–∞ –µ–Ω–µ—Ä–≥—ñ—è ===
with tab9:
    st.subheader("–û–±—á–∏—Å–ª–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –ø–æ–ª—è—Ä–∏–∑–∞—Ü—ñ–π–Ω–æ—ó —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó")
    
    if len(st.session_state.dfs)>0:

        # angl1 = st.number_input("–ù–∞–ø—Ä—è–º –Ω–∞ –¥–∂–µ—Ä–µ–ª–æ —Å–µ–π—Å–º–æ–º–µ—Ç—Ä–∞ 1, –≥—Ä–∞–¥—É—Å–∏", min_value=0.0, value=0.0, step=10.0, key="energ_angl1")
        # angl2 = st.number_input("–ù–∞–ø—Ä—è–º –Ω–∞ –¥–∂–µ—Ä–µ–ª–æ —Å–µ–π—Å–º–æ–º–µ—Ç—Ä–∞ 2, –≥—Ä–∞–¥—É—Å–∏", min_value=0.0, value=0.0, step=10.0, key="energ_angl2")
        # angl3 = st.number_input("–ù–∞–ø—Ä—è–º –Ω–∞ –¥–∂–µ—Ä–µ–ª–æ —Å–µ–π—Å–º–æ–º–µ—Ç—Ä–∞ 3, –≥—Ä–∞–¥—É—Å–∏", min_value=0.0, value=0.0, step=10.0, key="energ_angl3")
        angl1 = 0
        angl2 = 0
        angl3 = 0
        series = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É:", list(st.session_state.dfs.keys()), key="energ_sel")
        seismometr = int(st.number_input("–û–±–µ—Ä—ñ—Ç—å —Å–µ–π—Å–º–æ–º–µ—Ç—Ä –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É", min_value=1.0, max_value=3.0, value=1.0, step=1.0, key="energ_seism"))

        VrVz_dict = {}

        for i, (filename, data) in enumerate(st.session_state.dfs.items()):
            # st.write("–§–∞–π–ª ", filename, " —ñ–Ω–¥–µ–∫—Å —Å–µ—Ä—ñ—ó  ", str(i+1))
            # st.subheader(str(i))
            if 'X1' in list(data.columns):
    
                Vr1 = []
                Vr2 = []
                Vr3 = []
                Vz1 = []
                Vz2 = []
                Vz3 = []
                # st.write(i)
                # st.write(filename)
                # Vr1.append(ssp.compute_radial(data['X1'], data['Y11'], data['Y12'], angl1))
                # Vr2.append(ssp.compute_radial(data['X2'], data['Y21'], data['Y22'], angl2))
                # Vr3.append(ssp.compute_radial(data['X3'], data['Y31'], data['Y32'], angl2))
                
                Vr1.append(data['X1'])
                Vr2.append(data['X2'])
                Vr3.append(data['X3'])
                Vz1.append(-data['Z1'])
                Vz2.append(-data['Z2'])
                Vz3.append(-data['Z3'])
                Vr = {'1':Vr1, '2':Vr2, '3':Vr3}
                Vz = {'1':Vz1, '2':Vz2, '3':Vz3}
                VrVz_dict[filename+'Vr'] = Vr
                VrVz_dict[filename+'Vz'] = Vz
                
                # st.write(filename+'Vr')
                # st.write(filename+'Vz')
                
       
        st.subheader("–ì—Ä–∞—Ñ—ñ–∫ –ì–∞–Ω–∫–µ–ª—è")
        st.plotly_chart(ssp.plot_hankel(np.array(VrVz_dict[series+'Vr'][str(seismometr)])[0], np.array(VrVz_dict[series+'Vz'][str(seismometr)])[0], scale=1.0, mode = 'plotly'),use_container_width=True, key="plot_hackl"+str(seismometr))
        st.subheader("–ì—Ä–∞—Ñ—ñ–∫ —É—è–≤–Ω–æ—ó –µ–Ω–µ—Ä–≥—ñ—ó")
        st.plotly_chart(ssp.vpf(np.array(VrVz_dict[series+'Vr'][str(seismometr)])[0], np.array(VrVz_dict[series+'Vz'][str(seismometr)])[0], fs, mode='plotly'), key="plot_imenrg"+str(seismometr))
        im_power = ssp.vpf(np.array(VrVz_dict[series+'Vr'][str(seismometr)])[0], np.array(VrVz_dict[series+'Vz'][str(seismometr)])[0], fs, mode='matrix') 
        im_power_df = pd.DataFrame({'im_power':im_power})
        # st.session_state.dfs[series+"_vpf"] = im_power_df
        
        st.subheader("–°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–∞")
        st.pyplot(ssp.spectr_plot(im_power_df, fs, n_cols=1, columns=['im_power']), use_container_width=True)
        st.subheader("–ì—Ä–∞—Ñ—ñ–∫ PSD")
        db_scale_vpf = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –≤ —à–∫–∞–ª—ñ –¥–µ—Ü–∏–±–µ–ª, –¥–ë", value=False, key='db_scale_vpf')
        if db_scale_vpf:
            st.plotly_chart(ssp.psd_plot_df(im_power_df, fs=fs, n_cols=1, columns=['im_power'], mode='plotly', scale='db'), use_container_width=True,key="plot_vpf_psd1")
            f, Pxx = ssp.psd_plot_df(im_power_df, fs=fs, n_cols=1, columns=['im_power'], mode='matrix', scale='db') 
        else:
            st.plotly_chart(ssp.psd_plot_df(im_power_df, fs=fs, n_cols=1, columns=['im_power'], mode='plotly', scale='energy'), use_container_width=True,key="plot_vpf_psd2")
            f, Pxx = ssp.psd_plot_df(im_power_df, fs=fs, n_cols=1, columns=['im_power'], mode='matrix', scale='energy') 

        st.subheader("üéöÔ∏è –°–µ—Ä–µ–¥–Ω—î –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è PSD –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ")

        with st.form("psd_window_form", clear_on_submit=False):
            # –ü–æ–ª—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó —Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —á–∞—Å—Ç–æ—Ç–∏
            col1, col2 = st.columns(2)
            with col1:
                min_freq_psd = st.number_input("üîª –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞", min_value=0.0, value=20.0, step=1.0, key='min_freq_psd')
                
            with col2:
                max_freq_psd = st.number_input("üî∫ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞", min_value=0.0, value=50.0, step=1.0, key='max_freq_psd')
            submitted = st.form_submit_button("‚öôÔ∏è –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏")
            
            if submitted:
                print(f[0])
                print(Pxx[0])
                rms_psd, range_freq_val = ssp.rms_in_band(f[0], Pxx[0], min_freq_psd, max_freq_psd)
                st.subheader(f"üéöÔ∏è RMS PSD –¥–æ—Ä—ñ–≤–Ω—é—î {rms_psd} –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ –≤—ñ–¥ {range_freq_val[0]} –ì—Ü –¥–æ {range_freq_val[1]} –ì—Ü")



        st.subheader("üéöÔ∏è –ß–∞—Å–æ–≤—ñ –≤—ñ–∫–Ω–∞ —Å–∏–≥–Ω–∞–ª—É —Ç–∞ —à—É–º—É")
        
        with st.form("vpf_window_form", clear_on_submit=False):
            # –ü–æ–ª—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó —Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —á–∞—Å—Ç–æ—Ç–∏
            col1, col2 = st.columns(2)
            with col1:
                min_time_s = st.number_input("üîª –ü–æ—á–∞—Ç–æ–∫ —Å–∏–≥–Ω–∞–ª—É", min_value=0.0, value=1.0, step=0.1, key='min_time_sig')
            with col2:
                max_time_s = st.number_input("üî∫ –ö—ñ–Ω–µ—Ü—å —Å–∏–≥–Ω–∞–ª—É", min_value=0.0, value=10.0, step=0.1, key='max_time_sig')
            col1, col2 = st.columns(2)
            with col1:
                min_time_n = st.number_input("üîª –ü–æ—á–∞—Ç–æ–∫ —à—É–º—É", min_value=0.0, value=1.0, step=0.1, key='min_time_noise')
            with col2:
                max_time_n = st.number_input("üî∫ –ö—ñ–Ω–µ—Ü—å —à—É–º—É", min_value=0.0, value=10.0, step=0.1, key='max_time_noise')
            
            submitted = st.form_submit_button("‚öôÔ∏è –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –≤—ñ–∫–Ω–æ")
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        if submitted:
            signal = ssp.cut_dataframe_time_window(im_power_df, fs, min_time_s, max_time_s)
            noise = ssp.cut_dataframe_time_window(im_power_df, fs, min_time_n, max_time_n)
            
            signal_db = 10*np.log10((np.mean(signal**2))**(1/2)+10**(-12))
            noise_db = 10*np.log10((np.mean(noise**2))**(1/2)+10**(-12))
            
            # snr = (np.mean(signal**2))**(1/2)/(np.mean(noise**2))**(1/2)
            snr = ssp.compute_snr_df(signal, noise)
            
            
            st.subheader("RMS —Å–∏–≥–Ω–∞–ª—É = " + str(signal_db) + " –¥–ë")
            st.subheader("RMS —à—É–º—É = " + str(noise_db ) + " –¥–ë")
            st.subheader("–í—ñ–¥–Ω–æ—à–µ–Ω–Ω—è SNR")
            st.dataframe(snr)
            st.subheader("–ì—Ä–∞—Ñ—ñ–∫ –ì–∞–Ω–∫–µ–ª—è –≤–∏–¥—ñ–ª–µ–Ω–Ω–æ–≥–æ –≤—ñ–∫–Ω–æ–º —Å–∏–≥–Ω–∞–ª—É")
            st.plotly_chart(ssp.plot_hankel(np.array(VrVz_dict[series+'Vr'][str(seismometr)])[0], 
                                            np.array(VrVz_dict[series+'Vz'][str(seismometr)])[0], 
                                            scale=1.0, mode = 'plotly', 
                                            start_time=min_time_s, end_time=max_time_s),
                            use_container_width=True, key="plot_hackl_w"+str(seismometr))
            


# === –í–∫–ª–∞–¥–∫–∞ 10: –ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∞ –º–æ–¥–µ–ª—å —Å–æ–Ω–∞—Ä–∞ ===
with tab10:
    st.subheader("–ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∞ –º–æ–¥–µ–ª—å –∑–∞—Ç—É—Ö–∞–Ω–Ω—è")
    st.subheader("–í–∏–∫–æ–Ω–∞–π—Ç–µ –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–µ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è. –ü–æ–±—É–¥—É–π—Ç–µ –¥—ñ–∞–≥—Ä–∞–º—É VPF")

    if len(st.session_state.dfs_vpf)>0:
        
        with st.form("model_window_form", clear_on_submit=False):

            st.write("–ü–µ—Ä—à–∞ —á–∞—Å—Ç–∏–Ω–∞ —Å–µ—Ä—ñ—ó. –û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –∑ —Å—É—Ñ—Ñ—ñ–∫—Å–æ–º _vpf")
            selected_ser1 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é ‚Ññ1 –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", list(st.session_state.dfs_vpf.keys()), key="mat_ser1")        
            st.write("–î—Ä—É–≥–∞ —á–∞—Å—Ç–∏–Ω–∞ —Å–µ—Ä—ñ—ó. –û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –∑ —Å—É—Ñ—Ñ—ñ–∫—Å–æ–º _vpf")
            selected_ser2 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", list(st.session_state.dfs_vpf.keys()), key="mat_ser2")        
            st.write("–í–∫–∞–∂—ñ—Ç—å –≤—ñ–¥—Å—Ç–∞–Ω—ñ –¥–æ —Å–µ–π—Å–º–æ–º–µ—Ç—Ä—ñ–≤ —Å–µ—Ä—ñ–π")
            seismometr1 = float(st.number_input("–í–∫–∞–∂—ñ—Ç—å –≤—ñ–¥—Å—Ç–∞–Ω—å ‚Ññ1", min_value=1.0, max_value=20.0, value=3.0, step=1.0, key="mat_seism1"))
            seismometr2 = float(st.number_input("–í–∫–∞–∂—ñ—Ç—å –≤—ñ–¥—Å—Ç–∞–Ω—å ‚Ññ2", min_value=1.0, max_value=20.0, value=5.0, step=1.0, key="mat_seism2"))
            seismometr3 = float(st.number_input("–í–∫–∞–∂—ñ—Ç—å –≤—ñ–¥—Å—Ç–∞–Ω—å ‚Ññ3", min_value=1.0, max_value=20.0, value=7.5, step=1.0, key="mat_seism3"))
            seismometr4 = float(st.number_input("–í–∫–∞–∂—ñ—Ç—å –≤—ñ–¥—Å—Ç–∞–Ω—å ‚Ññ4", min_value=1.0, max_value=20.0, value=10.0, step=1.0, key="mat_seism4"))
            seismometr5 = float(st.number_input("–í–∫–∞–∂—ñ—Ç—å –≤—ñ–¥—Å—Ç–∞–Ω—å ‚Ññ5", min_value=1.0, max_value=20.0, value=12.5, step=1.0, key="mat_seism5"))
            seismometr6 = float(st.number_input("–í–∫–∞–∂—ñ—Ç—å –≤—ñ–¥—Å—Ç–∞–Ω—å ‚Ññ6", min_value=1.0, max_value=20.0, value=15.0, step=1.0, key="mat_seism6"))
            
            db_scale_model = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –≤ —à–∫–∞–ª—ñ –¥–µ—Ü–∏–±–µ–ª, –¥–ë", value=False, key='db_scale_model')
            
            submitted = st.form_submit_button("‚öôÔ∏è –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏")
            
        if submitted:
            
            
            
            min_freq_list = [30, 50, 70, 90, 110, 130, 150, 170, 190, 210, 230, 250, 270]
            max_freq_list = [50, 70, 90, 110, 130, 150, 170, 190, 210, 230, 250, 270, 290]
            
            index_labels = [f"{min_}-{max_}" for min_, max_ in zip(min_freq_list, max_freq_list)]

            # st.session_state.dfs[selected_ser1] - –≤–∏–±—Ä–∞–Ω–∞ —Å–µ—Ä—ñ—è, —â–æ –º—ñ—Å—Ç–∏—Ç—å 3 –∫–æ–ª–æ–Ω–∫–∏ –∑–Ω–∞—á–µ–Ω—å –ø—ñ—Å–ª—è VPF
            
            df_vpf_dict = {}
            
            
            seismometr_list = [seismometr1, seismometr2, seismometr3,
                               seismometr4, seismometr5, seismometr6]
            i = 0
            for col in ['im_power1', 'im_power2', 'im_power3']:
                seism_freq_vals1 = []
                seism_freq_vals2 = []
                for min_freq, max_freq in zip(min_freq_list, max_freq_list):
                    
                    f1, Pxx1 = ssp.psd_plot_df(st.session_state.dfs_vpf[selected_ser1], fs=fs, n_cols=1, columns=[col], mode='matrix', scale='energy')                
                    rms1, range_freq_val1 = ssp.rms_in_band(f1[0], Pxx1[0], min_freq, max_freq)        
                    seism_freq_vals1.append(float(rms1))
                    
                    f2, Pxx2 = ssp.psd_plot_df(st.session_state.dfs_vpf[selected_ser2], fs=fs, n_cols=1, columns=[col], mode='matrix', scale='energy')                
                    rms2, range_freq_val2 = ssp.rms_in_band(f2[0], Pxx2[0], min_freq, max_freq)        
                    seism_freq_vals2.append(float(rms2))
                    
                    print(st.session_state.dfs_vpf[selected_ser1])
                    print(st.session_state.dfs_vpf[selected_ser2])
                    
                print(seism_freq_vals1)
                print(seism_freq_vals2)
                    
                df_vpf_dict[seismometr_list[i]] = seism_freq_vals1         
                df_vpf_dict[seismometr_list[i+3]] = seism_freq_vals2         
                i = i + 1
            
            
            df_vpf = pd.DataFrame({k: df_vpf_dict[k] for k in sorted(df_vpf_dict)})
            df_vpf.index = index_labels
            
            print(df_vpf_dict)
            print(df_vpf)
            
            
            
            st.subheader("RMS –≤—ñ–¥ PSD —Å–∏–≥–Ω–∞–ª—É –Ω–∞ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏—Ö –≤—ñ–¥—Å—Ç–∞–Ω—è—Ö –ø—ñ—Å–ª—è VPF –Ω–∞ —Ñ—ñ–∫—Å–æ–≤–∞–Ω—ñ–π —á–∞—Å—Ç–æ—Ç—ñ")
            if db_scale_model:
                st.dataframe(ssp.to_decibels(df_vpf), height=495)
            else:
                st.dataframe(df_vpf.style.format("{:.4e}"), height=495)
            
            st.subheader("–ü–∏—Ç–æ–º—ñ –≤—Ç—Ä–∞—Ç–∏ –Ω–∞ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏—Ö –≤—ñ–¥—Å—Ç–∞–Ω—è—Ö –ø—ñ—Å–ª—è VPF –Ω–∞ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ—ó —á–∞—Å—Ç–æ—Ç—ñ")
            
            selected_col = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥—Å—Ç–∞–Ω—å —è–∫ –±–∞–∑–æ–≤—É –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞—Ç—É—Ö–∞–Ω–Ω—è (–∑–∞–∑–≤–∏—á–∞–π –Ω–∞–π–º–µ–Ω—à–∞)", list(df_vpf.columns), key="mat_sel_col")        
            
            # –í—ñ–¥–Ω—è—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—è –≤—ñ–¥ —É—Å—ñ—Ö —ñ–Ω—à–∏—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤ (–ø–æ–∫—Ä–æ–∫–æ–≤–æ)
            # df_vpf_sub = df_vpf.drop(columns=selected_col).subtract(df_vpf[selected_col], axis=0)
            
            df_vpf_sub = df_vpf.drop(columns=selected_col).divide(df_vpf[selected_col], axis=0)
            
            if db_scale_model:
                st.dataframe(ssp.to_decibels(df_vpf_sub), height=495)
            else:
                st.dataframe(df_vpf_sub.style.format("{:.4e}"), height=495)
            
            st.subheader("–¢–µ–æ—Ä–µ—Ç–∏—á–Ω—ñ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –∑–∞—Ç—É—Ö–∞–Ω–Ω—è –∞–º–ø–ª—ñ—Ç—É–¥ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –≤—ñ–¥—Å—Ç–∞–Ω—ñ. –í—Ç—Ä–∞—Ç–∏ –Ω–∞ —Ä–æ–∑–ø–æ–≤—Å—é–¥–∂–µ–Ω–Ω—è")
            
            seismometr_dist = [x - seismometr_list[0] for x in seismometr_list]
            
            df_wave_diminish_cols = [x for x in seismometr_dist if x>0]
            
            wave_diminish = [1/x for x in df_wave_diminish_cols]
            
            print(seismometr_dist)
            print(df_wave_diminish_cols)
            print(wave_diminish)
            
            df_wave_diminish = pd.DataFrame(wave_diminish)
            df_wave_diminish = df_wave_diminish.T
            df_wave_diminish.columns = df_wave_diminish_cols
            
            
            if db_scale_model:
                st.dataframe(ssp.to_decibels(df_wave_diminish))
            else:
                st.dataframe(df_wave_diminish)
            
            st.subheader("–ï–º–ø—ñ—Ä–∏—á–Ω—ñ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –∑–∞—Ç—É—Ö–∞–Ω–Ω—è –∞–º–ø–ª—ñ—Ç—É–¥ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –≤—ñ–¥—Å—Ç–∞–Ω—ñ. –í—Ç—Ä–∞—Ç–∏ –Ω–∞ —Ä–æ–∑–ø–æ–≤—Å—é–¥–∂–µ–Ω–Ω—è")
            
            df_wave_diminish_emp = pd.DataFrame(df_vpf_sub.mean())
            df_wave_diminish_emp = df_wave_diminish_emp.T
            df_wave_diminish_emp.columns = df_wave_diminish_cols
            
            
            if db_scale_model:
                st.dataframe(ssp.to_decibels(df_wave_diminish_emp))
            else:
                st.dataframe(df_wave_diminish_emp)


            
            
            
            
