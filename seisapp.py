import git
from git import Repo
from git.exc import GitCommandError

repo_url = "https://github.com/avk256/seisproc.git"
clone_path = "./seisproc"

try:
    Repo.clone_from(repo_url, clone_path)
    print("–†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π —É—Å–ø—ñ—à–Ω–æ –∫–ª–æ–Ω–æ–≤–∞–Ω–æ!")
except GitCommandError as e:
    print("‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é")

import seisproc.seisproc as ssp

import streamlit as st
import pandas as pd
import numpy as np

import statsmodels

from itertools import chain

@st.cache_data
def load_file(file_name):
    # st.write("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...")  # –¶–µ –±—É–¥–µ –≤–∏–¥–Ω–æ –ª–∏—à–µ 1 —Ä–∞–∑
    df = pd.read_csv(file_name, header=None, sep=';')
    # ! –û—Å—Ç–∞–Ω–Ω—è —Ü–∏—Ñ—Ä–∞ –ø–æ–∑–Ω–∞—á–∞—î –Ω–æ–º–µ—Ä —Å–µ–π—Å–º–æ–º–µ—Ç—Ä–∞ !!!
    df.columns = ['X1','Y11','Y21','Z1','X2','Y12','Y22','Z2','X3','Y13','Y23','Z3']
    return df

def drop_columns_with_suffixes(df, suffixes):
    """
    –í–∏–¥–∞–ª—è—î –≤—Å—ñ –∫–æ–ª–æ–Ω–∫–∏ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—É, —è–∫—ñ –∑–∞–∫—ñ–Ω—á—É—é—Ç—å—Å—è –Ω–∞ –±—É–¥—å-—è–∫–∏–π —ñ–∑ –∑–∞–¥–∞–Ω–∏—Ö —Å—É—Ñ—ñ–∫—Å—ñ–≤.
    –î–ª—è –∫–æ–ª–æ–Ω–æ–∫, —â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ 'Y', –≤–∏–¥–∞–ª—è—î —Ç—ñ, –≤ —è–∫–∏—Ö –ø–µ—Ä–µ–¥–æ—Å—Ç–∞–Ω–Ω—ñ–π —Å–∏–º–≤–æ–ª –≤—Ö–æ–¥–∏—Ç—å –¥–æ —Å—É—Ñ—ñ–∫—Å—ñ–≤.

    –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
        df (pd.DataFrame): –≤—Ö—ñ–¥–Ω–∏–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º
        suffixes (list of str): —Å–ø–∏—Å–æ–∫ —Å—É—Ñ—ñ–∫—Å—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        pd.DataFrame: –Ω–æ–≤–∏–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –±–µ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
    """
    cols_to_drop = []

    for col in df.columns:
        if col.startswith('Y') and len(col) >= 2:
            if col[-1] in suffixes:
                cols_to_drop.append(col)
        elif any(col.endswith(suffix) for suffix in suffixes):
            cols_to_drop.append(col)

    return df.drop(columns=cols_to_drop)

def filter_columns_by_prefixes(column_names, prefixes):
    """
    –§—ñ–ª—å—Ç—Ä—É—î –Ω–∞–∑–≤–∏ –∫–æ–ª–æ–Ω–æ–∫, –∑–∞–ª–∏—à–∞—é—á–∏ –ª–∏—à–µ —Ç—ñ, —â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ –∑–∞–¥–∞–Ω–∏—Ö –ø—Ä–µ—Ñ—ñ–∫—Å—ñ–≤.

    –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
        column_names (list of str): —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤ –∫–æ–ª–æ–Ω–æ–∫
        prefixes (list of str): —Å–ø–∏—Å–æ–∫ –ø—Ä–µ—Ñ—ñ–∫—Å—ñ–≤, –∑–∞ —è–∫–∏–º–∏ –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –≤—ñ–¥–±—ñ—Ä

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        list of str: —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫, —â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ –∑–∞–¥–∞–Ω–∏—Ö –ø—Ä–µ—Ñ—ñ–∫—Å—ñ–≤
    """
    return [col for col in column_names if any(col.startswith(prefix) for prefix in prefixes)]


###############################################################################

st.set_page_config(page_title="SeisApp", layout="wide")
st.title("–ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö —Å–µ–π—Å–º–æ–º–µ—Ç—Ä—ñ–≤")

if "counter" not in st.session_state:
    st.session_state.count = 0

print(st.session_state.count)
# === –ì–ª–æ–±–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, —è–∫—ñ –≤–ø–ª–∏–≤–∞—é—Ç—å –Ω–∞ —ñ–Ω—à—ñ –≤–∫–ª–∞–¥–∫–∏ ===
with st.sidebar:
    st.header("‚öôÔ∏è –ó–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
    
    st.title("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Ä—ñ–π –¥–∞–Ω–∏—Ö")

    
    # 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Ö CSV —Ñ–∞–π–ª—ñ–≤
    uploaded_files = st.file_uploader(
        "–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∞–±–æ –∫—ñ–ª—å–∫–∞ CSV-—Ñ–∞–π–ª—ñ–≤, —è–∫—ñ –º—ñ—Å—Ç—è—Ç—å –¥–∞–Ω—ñ —Å–µ—Ä—ñ–π",
        type="csv",
        accept_multiple_files=True
    )

    dfs = {}  # –∫–ª—é—á: —ñ–º'—è —Ñ–∞–π–ª—É, –∑–Ω–∞—á–µ–Ω–Ω—è: DataFrame
    
    # if st.button("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª–∏"):
    # –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —É —Å–ª–æ–≤–Ω–∏–∫ DataFrame'—ñ–≤
    if "dfs" not in st.session_state:
        st.session_state.dfs = dfs
    
    n_seism = 0
    if "n_seism" not in st.session_state:
        st.session_state.n_seism = n_seism
        
    geoph_list = []
    if "geoph_list" not in st.session_state:
        st.session_state.geoph_list = geoph_list

    def_geoph_list = []
    if "def_geoph_list" not in st.session_state:
        st.session_state.def_geoph_list = def_geoph_list
        
    im_geoph_list = ['im_power']
    if "im_geoph_list" not in st.session_state:        
        st.session_state.im_geoph_list = im_geoph_list
        
    true_indices = []
    if "true_indices" not in st.session_state:      
        st.session_state.true_indices = true_indices


        
    if uploaded_files and len(st.session_state.dfs)==0:
        for file in uploaded_files:
            dfs[file.name] = load_file(file)
            st.session_state.n_seism = int(len(dfs[file.name].columns)/4)
        st.write("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤...")    
        st.session_state.dfs = dfs
        st.session_state.count = st.session_state.count + 1  
        

    
    if len(st.session_state.dfs)>0:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–µ–∫–±–æ–∫—Å—ñ–≤ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ó—Ö –∑–Ω–∞—á–µ–Ω—å
        siesm_states = []
        
        for i in range(st.session_state.n_seism):
            state = st.checkbox(f"–°–µ–π—Å–º–æ–º–µ—Ç—Ä {i+1}", key=f"—Å–µ–π—Å–º–æ–º–µ—Ç—Ä_{i}", value=True)
            siesm_states.append(state)

        # –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        st.write("–°—Ç–∞–Ω –∫–æ–∂–Ω–æ–≥–æ —Å–µ–π—Å–º–æ–º–µ—Ç—Ä–∞:")
        st.write(siesm_states)
        
        
        st.session_state.true_indices = [str(i+1) for i, val in enumerate(siesm_states) if val is True]
        
        st.session_state.im_geoph_list = ['im_power' + str(i+1) for i, val in enumerate(siesm_states) if val is True] + ['im_power']
        
        if False in siesm_states:
            false_indices = [str(i+1) for i, val in enumerate(siesm_states) if val is False]
            for filename, df in st.session_state.dfs.items():
                st.session_state.dfs[filename] = drop_columns_with_suffixes(df, false_indices)
                st.session_state.geoph_list = list(df.columns)
        else:
            for filename, df in st.session_state.dfs.items():
                st.session_state.geoph_list = list(df.columns)
       
        st.session_state.def_geoph_list = filter_columns_by_prefixes(st.session_state.geoph_list, ['X', 'Z'])
                
            

            
            
            

    if len(st.session_state.dfs)>0:
    
        fs = st.number_input("üîª –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü—ñ—ó", min_value=800.0, value=800.0, step=10.0, key='freq')
        min_freq = 0
        min_freq = 0

        # ================ –°–º—É–≥–æ–≤–∏–π —Ñ—ñ–ª—å—Ç—Ä =====================================
        
        st.subheader("üéöÔ∏è –°–º—É–≥–æ–≤–∏–π —Ñ—ñ–ª—å—Ç—Ä")
        # –ü–æ–ª—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó —Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —á–∞—Å—Ç–æ—Ç–∏
        col1, col2 = st.columns(2)
        with col1:
            min_freq = st.number_input("üîª min —á–∞—Å—Ç–æ—Ç–∞", min_value=0.0, value=20.0, step=10.0, key='min_freq')
        with col2:
            max_freq = st.number_input("üî∫ max —á–∞—Å—Ç–æ—Ç–∞", min_value=0.0, value=50.0, step=10.0, key='max_freq')
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        if st.button("‚öôÔ∏è –§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏"):
            st.success(f"–ó–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è —Ñ—ñ–ª—å—Ç—Ä: –≤—ñ–¥ {min_freq} –¥–æ {max_freq} –ì—Ü")
            # –¢—É—Ç –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
            for key, data in st.session_state.dfs.items():
                st.session_state.dfs[key] = ssp.filter_dataframe(data, min_freq, max_freq, fs)
                
        

        # ================== –ß–∞—Å–æ–≤–µ –≤—ñ–∫–Ω–æ =====================================
        
        st.subheader("üéöÔ∏è –ß–∞—Å–æ–≤–µ –≤—ñ–∫–Ω–æ")
        # –ü–æ–ª—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó —Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —á–∞—Å—Ç–æ—Ç–∏
        col1, col2 = st.columns(2)
        with col1:
            min_time = st.number_input("üîª min —á–∞—Å", min_value=0.0, value=1.0, step=1.0, format="%.4f", key='min_time')
        with col2:
            max_time = st.number_input("üî∫ max —á–∞—Å", min_value=0.0, value=10.0, step=1.0, format="%.4f", key='max_time')
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        if st.button("‚öôÔ∏è –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –≤—ñ–∫–Ω–æ"):
            st.success(f"–ó–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è —á–∞—Å–æ–≤–µ –≤—ñ–∫–Ω–æ: –≤—ñ–¥ {min_time} –¥–æ {max_time} —Å")
            # –¢—É—Ç –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
            for key, data in st.session_state.dfs.items():
                dfs[key] = ssp.cut_dataframe_time_window(data, fs, min_time, max_time)
                
            st.session_state.dfs = dfs
            print(st.session_state.dfs[key].describe())
            # breakpoint()
        # ===================== –î–µ—Ç—Ä–µ–Ω–¥ =======================================
   
        st.subheader("üéöÔ∏è –û–ø–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —Ç—Ä–µ–Ω–¥—É")
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É –¥–µ—Ç—Ä–µ–Ω–¥—É
        if st.button("‚öôÔ∏è –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –¥–µ—Ç—Ä–µ–Ω–¥"):
            st.success("–ó–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–µ—Ç—Ä–µ–Ω–¥")
            # –¢—É—Ç –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
            for key, data in st.session_state.dfs.items():
                print(data.describe())
                # breakpoint()

                st.session_state.dfs[key] = ssp.detrend_dataframe(data)
    
    
    
# dfs = dfs

# if st.button("‚öôÔ∏è –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏"):


# === –í–∫–ª–∞–¥–∫–∏ ===
tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8, tab9, tab10, tab11, tab12, tab13 = st.tabs(["üìà –î–∞–Ω—ñ", 
                                                                                     "üìä –ì—Ä–∞—Ñ—ñ–∫–∏ —Å–µ—Ä—ñ–π", 
                                                                                     "üìä –ì—Ä–∞—Ñ—ñ–∫–∏ –º—ñ–∂ —Å–µ—Ä—ñ—è–º–∏", 
                                                                                     "–°–ø–µ–∫—Ç—Ä", 
                                                                                     "PSD", 
                                                                                     "RMS –∑–∞ PSD", 
                                                                                     "–ó–∞—Ç—Ä–∏–º–∫–∏", 
                                                                                     "–ö–æ–≥–µ—Ä–µ–Ω—Ç–Ω—ñ—Å—Ç—å",
                                                                                     "–ö–æ–≥–µ—Ä–µ–Ω—Ç–Ω–µ –ø—ñ–¥—Å—É–º–æ–≤—É–≤–∞–Ω–Ω—è",
                                                                                     "–ö–æ–≥–µ—Ä–µ–Ω—Ç–Ω–µ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è", 
                                                                                     "–í–ü–§", 
                                                                                     "–ê–∑–∏–º—É—Ç–∞–ª—å–Ω–∞ –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω—ñ—Å—Ç—å",
                                                                                     "–ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∞ –º–æ–¥–µ–ª—å —Å–æ–Ω–∞—Ä–∞"])



# === –í–∫–ª–∞–¥–∫–∞ 1: –î–∞–Ω—ñ ===
with tab1:

        dfs_vpf = {}  # –∫–ª—é—á: —ñ–º'—è —Ñ–∞–π–ª—É, –∑–Ω–∞—á–µ–Ω–Ω—è: DataFrame
        dfs_sum = {}  # –∫–ª—é—á: —ñ–º'—è —Ñ–∞–π–ª—É, –∑–Ω–∞—á–µ–Ω–Ω—è: DataFrame
        dfs_sub = {}  # –∫–ª—é—á: —ñ–º'—è —Ñ–∞–π–ª—É, –∑–Ω–∞—á–µ–Ω–Ω—è: DataFrame
        
        if "dfs_vpf" not in st.session_state:
            st.session_state.dfs_vpf = dfs_vpf
        if "dfs_sum" not in st.session_state:
            st.session_state.dfs_sum = dfs_sum
        if "dfs_sub" not in st.session_state:
            st.session_state.dfs_sub = dfs_sub


    
        # 3. –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        st.success(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(dfs)} —Ñ–∞–π–ª—ñ–≤")
        
        for filename, df in st.session_state.dfs.items():
            st.subheader(f"üìÑ –§–∞–π–ª: {filename}")
            st.write(df.head())
    
            # –î–æ–¥–∞—Ç–∫–æ–≤–æ: —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è

            st.text(f"–§–æ—Ä–º–∞: {df.shape[0]} —Ä—è–¥–∫—ñ–≤ √ó {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
            st.write(df.describe())
            
            # –ö–æ–≥–µ—Ä–µ–Ω—Ç–Ω–µ –ø—ñ–¥—Å—É–º–æ–≤—É–≤–∞–Ω–Ω—è
            
            df_sum_tmp = ssp.coherent_summation(df, fs=fs)
           
            # df_sum_tmp = ssp.duplicate_columns(df_sum_tmp)
            st.session_state.dfs_sum[filename+"_sum"] = df_sum_tmp

            df_vpf_tmp = ssp.vpf_df(df, fs)                        
            st.session_state.dfs_vpf[filename+"_vpf"] = df_vpf_tmp
        
        for filename, df in st.session_state.dfs_sum.items():   
            
            
            df_vpf_tmp = ssp.vpf_df(df, fs)                        
            st.session_state.dfs_vpf[filename+"_vpf"] = df_vpf_tmp
        
        for filename, df in st.session_state.dfs_sub.items():   
            
            
            df_vpf_tmp = ssp.vpf_df(df, fs)                        
            st.session_state.dfs_vpf[filename+"_vpf"] = df_vpf_tmp
            
        for filename, df in st.session_state.dfs_sub.items():   
                        
            df_sum_tmp = ssp.coherent_summation(df, fs=fs)
           
            # df_sum_tmp = ssp.duplicate_columns(df_sum_tmp)
            st.session_state.dfs_sum[filename+"_sum"] = df_sum_tmp
    


# === –í–∫–ª–∞–¥–∫–∞ 2: –ì—Ä–∞—Ñ—ñ–∫–∏ ===
with tab2:
    
    
    st.subheader("–ì—Ä–∞—Ñ—ñ–∫–∏ —Å–µ—Ä—ñ–π —É –¥–æ–º–µ–Ω—ñ –∞–º–ø–ª—ñ—Ç—É–¥–∞-—á–∞—Å")
    n_cols_plots = int(st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è", min_value=0.0, value=3.0, step=1.0, key='n_col'))
    selected_plots = st.multiselect("–û–±–µ—Ä—ñ—Ç—å –≥–µ–æ—Ñ–æ–Ω–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", st.session_state.geoph_list, default=st.session_state.def_geoph_list, key='sel_geoph')
    one_plot_plots = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –≥–µ–æ—Ñ–æ–Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º—É –≥—Ä–∞—Ñ—ñ–∫—É", value=True, key='one_plot')
    
    
    if len(st.session_state.dfs)>0:
        for filename, data in st.session_state.dfs.items():
            st.subheader(filename)
            # st.write(filename)
            # st.caption(filename)
            
            if all(elem in list(data.columns) for elem in selected_plots):
            
                if one_plot_plots:
                    st.plotly_chart(ssp.plot_time_signals(data, fs, n_cols=n_cols_plots, threshold=0.5, columns=selected_plots, mode="plotly_one"), use_container_width=True, key='plot_one'+filename)
                else:
                    st.plotly_chart(ssp.plot_time_signals(data, fs, n_cols=n_cols_plots, threshold=0.5, columns=selected_plots, mode="plotly"), use_container_width=True, key='plot_many'+filename)
    
# === –í–∫–ª–∞–¥–∫–∞ 3: –ì—Ä–∞—Ñ—ñ–∫–∏ –º—ñ–∂ —Å–µ—Ä—ñ—è–º–∏ ===
with tab3:
    
    
    st.subheader("–ì—Ä–∞—Ñ—ñ–∫–∏ –º—ñ–∂ —Å–µ—Ä—è–º–∏ —É –¥–æ–º–µ–Ω—ñ –∞–º–ø–ª—ñ—Ç—É–¥–∞-—á–∞—Å")

    sel_ser_list = []
    sel_geoph_list = []

    min_time_list = []
    max_time_list = []

    df_plot = pd.DataFrame()
    df_plot_list = []


    if len(st.session_state.dfs)>0:

        n_ser = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—Å—ñ—Ö —Å–µ—Ä—ñ–π –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó", min_value=0, value=None, step=1, key='plots_ser_numb')

        if n_ser:
        
            with st.form("plots_window_form", clear_on_submit=False): 
                
                for i in range(1, n_ser+1):
                    sel_ser_plots = st.selectbox(f"–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é ‚Ññ{i} –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", 
                                                      list(st.session_state.dfs.keys())+list(st.session_state.dfs_vpf.keys())+list(st.session_state.dfs_sum.keys())+list(st.session_state.dfs_sub.keys()),
                                                      key="sel_mul_ser_plots"+str(i))
                    sel_geoph_plots = st.multiselect("–û–±–µ—Ä—ñ—Ç—å –≥–µ–æ—Ñ–æ–Ω–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", 
                                                        st.session_state.geoph_list+st.session_state.im_geoph_list+['X', 'Z', 'Y1', 'Y2'],
                                                        default=st.session_state.def_geoph_list,
                                                        key="sel_mul_geo_plots"+str(i))

                    sel_ser_list.append(sel_ser_plots)
                    sel_geoph_list.append(sel_geoph_plots)
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        plots_min_time_s = st.number_input("üîª –ü–æ—á–∞—Ç–æ–∫ —Å–∏–≥–Ω–∞–ª—É", format="%.4f", min_value=0.0, value=0.0, step=0.1, key='plots_min_time_sig'+str(i))
                    with col2:
                        plots_max_time_s = st.number_input("üî∫ –ö—ñ–Ω–µ—Ü—å —Å–∏–≥–Ω–∞–ª—É", format="%.4f", min_value=0.0, value=1.0, step=0.1, key='plots_max_time_sig'+str(i))
                   
                    min_time_list.append(plots_min_time_s)
                    max_time_list.append(plots_max_time_s)


                st.subheader("–í–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–≤")
                    
                sel_ser_align1 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –±–∞–∑–æ–≤—É —Å–µ—Ä—ñ—é –¥–æ —è–∫–æ—ó –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", 
                                                  list(st.session_state.dfs.keys())+list(st.session_state.dfs_vpf.keys()),
                                                  key="sel_ser_align1")
                sel_geoph_align1 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –≥–µ–æ—Ñ–æ–Ω–∏ –¥–ª—è –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", 
                                                    st.session_state.geoph_list+st.session_state.im_geoph_list+['X', 'Z', 'Y1', 'Y2'],
                                                    key="sel_geo_align1")
                
                sel_ser_align2 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é, —è–∫–∞ –±—É–¥–µ –≤–∏—Ä—ñ–≤–Ω—è–Ω–∞ –∑—ñ —Å–ø–∏—Å–∫—É:", 
                                                  list(st.session_state.dfs.keys())+list(st.session_state.dfs_vpf.keys()),
                                                  key="sel_mul_ser_align2")
                sel_geoph_align2 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –≥–µ–æ—Ñ–æ–Ω–∏ –¥–ª—è –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", 
                                                    st.session_state.geoph_list+st.session_state.im_geoph_list+['X', 'Z', 'Y1', 'Y2'],
                                                    key="sel_mul_geo_align2")
                
                
                
                
                
                submitted = st.form_submit_button("‚öôÔ∏è –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫–∏")
                
            if submitted:
                    
                for i, df_name in enumerate(sel_ser_list):
                    if 'vpf' in df_name: 
                        df = st.session_state.dfs_vpf[df_name][sel_geoph_list[i]]
                    elif 'sum' in df_name:
                        df = st.session_state.dfs_sum[df_name][sel_geoph_list[i]]
                    elif 'sub' in df_name:
                        df = st.session_state.dfs_sub[df_name][sel_geoph_list[i]]
                    else:
                        df = st.session_state.dfs[df_name][sel_geoph_list[i]]
                        
                    df = df.add_suffix("_"+df_name)
                    df = ssp.cut_dataframe_time_window(df, fs=fs, start_time=min_time_list[i], end_time=max_time_list[i])

                    df_plot_list.append(df)
                df_plot_list = ssp.align_dataframe_lengths(df_plot_list)
                df_plot = pd.concat(df_plot_list, axis=1)
                
                print(df_plot)
                print(min_time_list)
                print(max_time_list)
                
                st.plotly_chart(ssp.plot_time_signals(df_plot, 
                                                      fs, 
                                                      n_cols=1, 
                                                      threshold=0.5, columns=list(df_plot.columns), 
                                                      mode="plotly_one"), 
                                use_container_width=True, key='plots_multy')
                
                st.subheader("–ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Å–∏–≥–Ω–∞–ª–∞–º–∏")
                
                delay_matrix = ssp.compute_delay_matrix(df_plot, fs, method='gcc_phat')
                st.dataframe(delay_matrix)
                
                # st.write(delay_matrix['X2_25.07.20-2.csv']['X3_25.07.20-12.csv'])
                
                if 'vpf' in sel_ser_align1:
                    df1 = st.session_state.dfs_vpf[sel_ser_align1][sel_geoph_align1]
                elif 'sum' in sel_ser_align1:
                    df1 = st.session_state.dfs_sum[sel_ser_align1][sel_geoph_align1]
                elif 'sub' in sel_ser_align1:
                    df1 = st.session_state.dfs_sub[sel_ser_align1][sel_geoph_align1]
                else:
                    df1 = st.session_state.dfs[sel_ser_align1][sel_geoph_align1]

                if 'vpf' in sel_ser_align2:
                    df2 = st.session_state.dfs_vpf[sel_ser_align2][sel_geoph_align2]
                elif 'sum' in sel_ser_align2:
                    df2 = st.session_state.dfs_sum[sel_ser_align2][sel_geoph_align2]
                elif 'sub' in sel_ser_align2:
                    df2 = st.session_state.dfs_sub[sel_ser_align2][sel_geoph_align2]
                else:
                    df2 = st.session_state.dfs[sel_ser_align2][sel_geoph_align2]

 
                    
                df_align = ssp.align_two_signals(np.array(df1), np.array(df2), fs=fs, method='gcc_phat', max_lag_s=None)
                
                
                    
                if len(df_align)>0:
                    st.plotly_chart(ssp.plot_time_signals(df_align, 
                                                          fs, 
                                                          n_cols=1, 
                                                          threshold=0.5, columns=list(df_align.columns), 
                                                          mode="plotly_one"), 
                                    use_container_width=True, key='plots_align')



# === –í–∫–ª–∞–¥–∫–∞ 4: –°–ø–µ–∫—Ç—Ä ===
with tab4:
    st.subheader("–°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–∏. –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —É –¥–æ–º–µ–Ω—ñ —á–∞—Å—Ç–æ—Ç–∞-—á–∞—Å")
    
    with st.form("spectr_window_form", clear_on_submit=False):
        seg_len_s = st.number_input("–î–æ–≤–∂–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–∏, —Å", min_value=0.0, value=None, step=0.1, format="%.4f", key='nperseg')
        overlap_s = st.number_input("–í–µ–ª–∏—á–∏–Ω–∞ –ø–µ—Ä–µ–∫—Ä–∏—Ç—Ç—è –º—ñ–∂ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏, —Å", min_value=0.0, value=None, step=0.01, format="%.4f", key='noverlap')
        submitted = st.form_submit_button("‚öôÔ∏è –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")
    
    
    
    if submitted and len(st.session_state.dfs)>0:
        for filename, data in st.session_state.dfs.items():
            st.subheader(filename)
            
            if all(elem in list(data.columns) for elem in selected_plots):
                st.pyplot(ssp.spectr_plot(data, fs, n_cols=n_cols_plots, columns=selected_plots, seg_len_s=seg_len_s, overlap_s=overlap_s), use_container_width=True)
    
# === –í–∫–ª–∞–¥–∫–∞ 5: PSD ===
with tab5:
    st.subheader("–°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–∞ —â—ñ–ª—å–Ω—ñ—Å—Ç—å –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ (PSD)")
    db_scale = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –≤ —à–∫–∞–ª—ñ –¥–µ—Ü–∏–±–µ–ª, –¥–ë", value=True, key='db_scale1')
    
    if len(st.session_state.dfs)>0:
        for filename, data in st.session_state.dfs.items():
            st.subheader(filename)
            if all(elem in list(data.columns) for elem in selected_plots):
                if db_scale:
                    st.plotly_chart(ssp.psd_plot_df(data, fs=fs, n_cols=n_cols_plots, columns=selected_plots, mode='plotly',scale='db'), use_container_width=True, key='plot_psd1'+filename)
                else:
                    st.plotly_chart(ssp.psd_plot_df(data, fs=fs, n_cols=n_cols_plots, columns=selected_plots, mode='plotly',scale='energy'), use_container_width=True, key='plot_psd2'+filename)

# === –í–∫–ª–∞–¥–∫–∞ 6: RMS –∑–∞ PSD ===
with tab6:
    st.subheader("–ì—Ä–∞—Ñ—ñ–∫ PSD")
    
    if len(st.session_state.dfs)>0:
        
        selected_ser_psd = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", list(st.session_state.dfs.keys()),key="sel_rms_psd1")
        selected_geoph_psd = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –≥–µ–æ—Ñ–æ–Ω–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", st.session_state.geoph_list+st.session_state.im_geoph_list,key="sel_rms_psd2")
    
        db_scale_psd = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –≤ —à–∫–∞–ª—ñ –¥–µ—Ü–∏–±–µ–ª, –¥–ë", value=False, key='db_scale_rms_psd')
        if db_scale_psd:
            st.plotly_chart(ssp.psd_plot_df(st.session_state.dfs[selected_ser_psd], fs=fs, n_cols=1, columns=[selected_geoph_psd], mode='plotly', scale='db'), use_container_width=True,key="plot_rms_psd1")
            f, Pxx = ssp.psd_plot_df(st.session_state.dfs[selected_ser_psd], fs=fs, n_cols=1, columns=[selected_geoph_psd], mode='matrix', scale='db') 
        else:
            st.plotly_chart(ssp.psd_plot_df(st.session_state.dfs[selected_ser_psd], fs=fs, n_cols=1, columns=[selected_geoph_psd], mode='plotly', scale='energy'), use_container_width=True,key="plot_rms_psd2")
            f, Pxx = ssp.psd_plot_df(st.session_state.dfs[selected_ser_psd], fs=fs, n_cols=1, columns=[selected_geoph_psd], mode='matrix', scale='energy') 
    
        
        st.subheader("üéöÔ∏è –°–µ—Ä–µ–¥–Ω—î –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è PSD –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ")
    
        with st.form("rms_psd_window_form", clear_on_submit=False):

 





            # –ü–æ–ª—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó —Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —á–∞—Å—Ç–æ—Ç–∏
            col1, col2 = st.columns(2)
            with col1:
                min_freq_rms_psd = st.number_input("üîª –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞", min_value=0.0, value=20.0, step=1.0, key='min_freq_rms_psd')
                
            with col2:
                max_freq_rms_psd = st.number_input("üî∫ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞", min_value=0.0, value=50.0, step=1.0, key='max_freq_rms_psd')
            submitted = st.form_submit_button("‚öôÔ∏è –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏")
            
        if submitted:
            print(f[0])
            print(Pxx[0])
            rms_psd, range_freq_val = ssp.rms_in_band(f[0], Pxx[0], min_freq_rms_psd, max_freq_rms_psd)
            st.subheader(f"üéöÔ∏è RMS PSD –¥–æ—Ä—ñ–≤–Ω—é—î {rms_psd} –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ –≤—ñ–¥ {range_freq_val[0]} –ì—Ü –¥–æ {range_freq_val[1]} –ì—Ü")
    

# === –í–∫–ª–∞–¥–∫–∞ 7: –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–æ–∫ ===
with tab7:
    st.subheader("–ó–∞—Ç—Ä–∏–º–∫–∏ –≤ —Å–∏–≥–Ω–∞–ª–∞—Ö –≥–µ–æ—Ñ–æ–Ω—ñ–≤")
    method_delay = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–æ–∫:", ['gcc_phat', 'envelope', 'cross_correlation', 'rms_envelope'],key="sel_method_delay")
    
    if len(st.session_state.dfs)>0:
        for filename, data in chain(st.session_state.dfs.items(), st.session_state.dfs_vpf.items()):
            st.subheader(filename)
            delay_matrix = ssp.compute_delay_matrix(data, fs, method=method_delay)
            st.dataframe(delay_matrix)


            
# === –í–∫–ª–∞–¥–∫–∞ 8: –ö–æ–≥–µ—Ä–µ–Ω—Ç–Ω—ñ—Å—Ç—å ===
with tab8:
    st.subheader("–ö–æ–≥–µ—Ä–µ–Ω—Ç–Ω—ñ—Å—Ç—å –º—ñ–∂ –¥–≤–æ–º–∞ —Å–∏–≥–Ω–∞–ª–∞–º–∏")

    if len(st.session_state.dfs)>0:

        
        with st.form("coher_window_form", clear_on_submit=False): 
                        
            st.write("1–π —Å–∏–≥–Ω–∞–ª")
            selected_ser1_coher = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", list(st.session_state.dfs.keys())+list(st.session_state.dfs_vpf.keys()),key="coh_sel_ser1")
            selected_seism1_coher = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø–∏ –≥–µ–æ—Ñ–æ–Ω—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", st.session_state.geoph_list+st.session_state.im_geoph_list,key="coh_sel_seism1")

            col1, col2 = st.columns(2)
            with col1:
                coher_min_time_s1 = st.number_input("üîª –ü–æ—á–∞—Ç–æ–∫ —Å–∏–≥–Ω–∞–ª—É", format="%.4f", min_value=0.0, value=0.0, step=0.1, key='coher_min_time_sig1')
            with col2:
                coher_max_time_s1 = st.number_input("üî∫ –ö—ñ–Ω–µ—Ü—å —Å–∏–≥–Ω–∞–ª—É", format="%.4f", min_value=0.0, value=1.0, step=0.1, key='coher_max_time_sig1')
           
            st.write("2–π —Å–∏–≥–Ω–∞–ª")
            selected_ser2_coher = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", list(st.session_state.dfs.keys())+list(st.session_state.dfs_vpf.keys()),key="coh_sel_ser2")
            selected_seism2_coher = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø–∏ –≥–µ–æ—Ñ–æ–Ω—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", st.session_state.geoph_list+st.session_state.im_geoph_list,key="coh_sel_seism2")

            col1, col2 = st.columns(2)
            with col1:
                coher_min_time_s2 = st.number_input("üîª –ü–æ—á–∞—Ç–æ–∫ —Å–∏–≥–Ω–∞–ª—É", format="%.4f", min_value=0.0, value=0.0, step=0.1, key='coher_min_time_sig2')
            with col2:
                coher_max_time_s2 = st.number_input("üî∫ –ö—ñ–Ω–µ—Ü—å —Å–∏–≥–Ω–∞–ª—É", format="%.4f", min_value=0.0, value=1.0, step=0.1, key='coher_max_time_sig2')

                    
            type_plot = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", ["linear", "log"], key="coh_type_plot")
            
            coher_seg_len_s = st.number_input("–î–æ–≤–∂–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞, —Å", min_value=0.0, value=0.02, step=0.1, format="%.4f", key='coher_nperseg')
            coher_overlap_s = st.number_input("–í–µ–ª–∏—á–∏–Ω–∞ –ø–µ—Ä–µ–∫—Ä–∏—Ç—Ç—è –º—ñ–∂ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏, —Å", min_value=0.0, value=0.018, step=0.01, format="%.4f", key='coher_noverlap')

            st.write("–î—ñ–∞–ø–∞–∑–æ–Ω —á–∞—Å—Ç–æ—Ç –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫–∏")

            col1, col2 = st.columns(2)
            with col1:
                min_freq_coher = st.number_input("üîª –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞", min_value=0.0, value=20.0, step=1.0,  key='min_freq_coher')
                
            with col2:
                max_freq_coher = st.number_input("üî∫ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞", min_value=0.0, value=50.0, step=1.0, key='max_freq_coher')
                



            submitted = st.form_submit_button("‚öôÔ∏è –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫–∏")
    
            
        if submitted:
                
            coher_nperseg = int(coher_seg_len_s * fs)
            coher_noverlap = int(coher_overlap_s * fs)
            
            
            if 'vpf' in selected_ser1_coher:
                df1 = st.session_state.dfs_vpf[selected_ser1_coher][selected_seism1_coher]
            else:
                df1 = st.session_state.dfs[selected_ser1_coher][selected_seism1_coher]
                
            if 'vpf' in selected_ser2_coher:
                df2 = st.session_state.dfs_vpf[selected_ser2_coher][selected_seism2_coher]
            else:
                df2 = st.session_state.dfs[selected_ser2_coher][selected_seism2_coher]


            # df1 = st.session_state.dfs[selected_ser1_coher][selected_seism1_coher]
            # df2 = st.session_state.dfs[selected_ser2_coher][selected_seism2_coher]
            
            df2 = df2[:len(df1)]
                    
                
            df1 = ssp.cut_dataframe_time_window(df1, fs=fs, start_time=coher_min_time_s1, end_time=coher_max_time_s1)
            df2 = ssp.cut_dataframe_time_window(df2, fs=fs, start_time=coher_min_time_s2, end_time=coher_max_time_s2)
            
            sig1 = np.array(df1)
            sig2 = np.array(df2)
            
                
            st.plotly_chart(ssp.plot_coherence(sig1, 
                                               sig2, 
                                               fs, f"{selected_ser1_coher}, {selected_seism1_coher}", f"{selected_ser2_coher}, {selected_seism2_coher}", 
                                               mode='plotly', type_plot=type_plot,
                                               nperseg=coher_nperseg, noverlap=coher_noverlap,
                                               ), use_container_width=True, key='plot_coher')


            f, Cxy = ssp.plot_coherence(sig1, sig2, fs, f"{selected_ser1_coher}, {selected_seism1_coher}", f"{selected_ser2_coher}, {selected_seism2_coher}", 
                                               mode='matrix', type_plot="linear",
                                               nperseg=coher_nperseg, noverlap=coher_noverlap,
                                               )


            print(f)
            print(Cxy)
            rms_coher, range_freq_val_coher = ssp.rms_in_band(f, Cxy, min_freq_coher, max_freq_coher)
            st.subheader(f"üéöÔ∏è RMS –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—ñ –¥–æ—Ä—ñ–≤–Ω—é—î {rms_coher} –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ –≤—ñ–¥ {range_freq_val_coher[0]} –ì—Ü –¥–æ {range_freq_val_coher[1]} –ì—Ü")
            




# === –í–∫–ª–∞–¥–∫–∞ 9: –ö–æ–≥–µ—Ä–µ–Ω—Ç–Ω–µ –ø—ñ–¥—Å—É–º–æ–≤—É–≤–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–≤ —Å–µ–π—Å–º–æ–º–µ—Ç—Ä—ñ–≤ ===
with tab9:
    st.subheader("–ö–æ–≥–µ—Ä–µ–Ω—Ç–Ω–µ –ø—ñ–¥—Å—É–º–æ–≤—É–≤–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–≤ —Å–µ–π—Å–º–æ–º–µ—Ç—Ä—ñ–≤")

    if len(st.session_state.dfs)>0:

        with st.form("coh_sum_window_form", clear_on_submit=False):
            # –ü–æ–ª—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó —Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —á–∞—Å—Ç–æ—Ç–∏
            st.write("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –¥–ª—è –ø—ñ–¥—Å—É–º–æ–≤—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ —Å–µ–π—Å–º–æ–º–µ—Ç—Ä—ñ–≤")
            selected_ser_sum = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", list(st.session_state.dfs.keys()),key="coh_sum_sel_ser1")

            st.subheader("–ü–æ—Ä—ñ–≥ —á—É—Ç–ª–∏–≤–æ—Å—Ç—ñ –º–∞—Å–∫–∏ –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—ñ") 
            st.write("–ú–µ–Ω—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è (~0.0) ‚Üí –º–∞—Å–∫–∞ —á—É—Ç–ª–∏–≤—ñ—à–∞, –±—ñ–ª—å—à–µ —á–∞—Å—Ç–æ—Ç –≤–≤–∞–∂–∞—é—Ç—å—Å—è –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–∏–º–∏ ‚Üí –∞–≥—Ä–µ—Å–∏–≤–Ω—ñ—à–µ –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—è.")
            st.write("–ë—ñ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è (~0.2‚Äì0.3) ‚Üí –º–µ–Ω—à–µ —á–∞—Å—Ç–æ—Ç –ø–µ—Ä–µ–≤–∏—â—É—é—Ç—å –ø–æ—Ä—ñ–≥ ‚Üí –º‚Äô—è–∫—ñ—à–µ –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—è.")
            st.write("–ó–Ω–∞—á–µ–Ω–Ω—è >0.3 ‚Üí –¥—É–∂–µ –æ–±–µ—Ä–µ–∂–Ω–µ –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—è")

            coherence_threshold_sum = st.number_input("–ü–æ—Ä—ñ–≥ —á—É—Ç–ª–∏–≤–æ—Å—Ç—ñ", min_value=0.0, value=0.9, step=0.1, key='sum_coher_thersh')
            
            st.subheader("win_len. –î–æ–≤–∂–∏–Ω–∞ –∫–æ–≤–∑–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ (–Ω–µ–ø–∞—Ä–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥–ª—ñ–∫—ñ–≤)")
            st.write("–û–±–∏—Ä–∞—î—Ç—å—Å—è –∑–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é –ø–æ–¥—ñ—ó (—ñ–º–ø—É–ª—å—Å—É).")
            st.write("–ú–∞—î –±—É—Ç–∏ –ø—Ä–∏–±–ª–∏–∑–Ω–æ 1‚Äì2√ó –¥–æ–≤–∂–∏–Ω–∏ –ø–æ–¥—ñ—ó, —è–∫—É —Ö–æ—á–µ–º–æ –≤–∏—è–≤–∏—Ç–∏/–ø—Ä–∏–≥–ª—É—à–∏—Ç–∏.")
            st.write("–¢–∏–ø–æ–≤–æ: 101‚Äì301 –¥–ª—è —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–æ–≤–∂–∏–Ω–æ—é –∫—ñ–ª—å–∫–∞ —Ç–∏—Å—è—á –≤—ñ–¥–ª—ñ–∫—ñ–≤.")
            st.write("–ó–∞–Ω–∞–¥—Ç–æ –º–∞–ª–µ ‚Üí —à—É–º–Ω—ñ –æ—Ü—ñ–Ω–∫–∏, —Å—Ç—Ä–∏–±–∫–∏;")
            st.write("–∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ ‚Üí –≤—Ç—Ä–∞—Ç–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó (—Ü—ñ–ª—å ¬´–∑–º–∞–∑—É—î—Ç—å—Å—è¬ª).")
            
            win_len = int(st.number_input("–î–æ–≤–∂–∏–Ω–∞ –∫–æ–≤–∑–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ (–Ω–µ–ø–∞—Ä–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥–ª—ñ–∫—ñ–≤)", min_value=0, value=201, step=1, key='sum_win_len'))
            
            st.subheader("p ‚Äî ¬´–∂–æ—Ä—Å—Ç–∫—ñ—Å—Ç—å¬ª –≤–∞–≥")
            st.write("–í–∞–≥–∞ = (max(Œ≥¬≤ ‚àí tau, 0))^p. ")
            st.write("–ë—ñ–ª—å—à–µ p ‚Üí —Å–∏–ª—å–Ω—ñ—à–µ –ø—ñ–¥–∫—Ä–µ—Å–ª—é—î –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω—ñ –¥—ñ–ª—è–Ω–∫–∏.")
            
            p_val = int(st.number_input("¬´–∂–æ—Ä—Å—Ç–∫—ñ—Å—Ç—å¬ª –≤–∞–≥", min_value=1, value=2, step=1, key='sum_p_val'))
            
            st.subheader("smooth_gamma. –ó–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫–∞ –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—ñ Œ≥¬≤")
            st.write("–¢–∏–ø–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è: 0.05‚Äì0.2 √ó win_len.")
            st.write("–ó–∞–Ω–∞–¥—Ç–æ –º–∞–ª–µ ‚Üí –º–∞—Å–∫–∞ ¬´–º–µ—Ä–µ—Ö—Ç–∏—Ç—å¬ª (–¥—ñ—Ä–∫–∏ –≤ –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ñ);")
            st.write("–∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ ‚Üí –∫–æ—Ä–æ—Ç–∫—ñ —Ü—ñ–ª—ñ —Ç–µ–∂ –ø—Ä–∏–¥—É—à—É—é—Ç—å—Å—è.")
            st.write("–∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ ‚Üí –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —Ä–æ–∑–º–∞–∑—É—î—Ç—å—Å—è –Ω–∞ —Å—É—Å—ñ–¥–Ω—ñ —Ç–æ—á–∫–∏")
            
            smooth_gamma_sum = int(st.number_input("–ó–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫–∞ –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—ñ Œ≥¬≤ (—á–∏—Å–ª–æ –≤—ñ–¥–ª—ñ–∫—ñ–≤)", min_value=0, value=int(0.2*win_len), step=1, key='sum_smooth_gamma'))

            st.subheader("use_mask ‚Äî –≤–º–∏–∫–∞—î/–≤–∏–º–∏–∫–∞—î –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω—ñ –≤–∞–≥–∏.")
            st.write("–Ø–∫—â–æ False ‚Üí –∑–≤–∏—á–∞–π–Ω–∞ —Å—É–º–∞.")
            
            use_mask = st.selectbox("–£–≤—ñ–º–∫–Ω—É—Ç–∏ –º–∞—Å–∫—É?", ["True", "False"], key="sel_use_mask")
            
            st.subheader("use_median ‚Äî —Å—Ç—ñ–π–∫–∏–π —Å—É–º–∞—Ç–æ—Ä –ø–æ –∫–∞–Ω–∞–ª–∞—Ö")
            st.write("–ú–µ–¥—ñ–∞–Ω–∞ –∑–∞–º—ñ—Å—Ç—å –∑–≤–∞–∂–µ–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ; –¥–æ–±—Ä–µ, –∫–æ–ª–∏ —î ¬´–ø–æ–≥–∞–Ω—ñ¬ª –∫–∞–Ω–∞–ª–∏.")
            
            
            use_median = st.selectbox("–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –º–µ–¥—ñ–∞–Ω—É?", ["True", "False"], key="sel_use_median")
            

            submitted = st.form_submit_button("‚öôÔ∏è –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å—É–º—É")
            
        if submitted:
            st.subheader("–û–±—Ä–∞–Ω–∞ —Å–µ—Ä—ñ—è: "+selected_ser_sum)
            df_sum = ssp.coherent_summation(st.session_state.dfs[selected_ser_sum], fs=fs,
                                            method='gcc_phat', max_lag_s=None,
                                            win_len=win_len, tau=coherence_threshold_sum,
                                            p=p_val, smooth_gamma=smooth_gamma_sum,
                                            use_mask=bool(use_mask), use_median=bool(use_median))
            print("coherent sum")
            print(df_sum)
            # breakpoint()
            # df_sum = ssp.duplicate_columns(df_sum)
            
            st.subheader("–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ")
            
            st.plotly_chart(ssp.plot_time_signals(st.session_state.dfs[selected_ser_sum], fs, n_cols=n_cols_plots, threshold=0.5, columns=list(st.session_state.dfs[selected_ser_sum].columns), mode="plotly_one"), use_container_width=True, key='plot_init_coher_sum')    
            
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ—ó —Å—É–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤")
            
            st.plotly_chart(ssp.plot_time_signals(df_sum, fs, n_cols=n_cols_plots, threshold=0.5, columns=list(df_sum.columns), mode="plotly_one"), use_container_width=True, key='plot_coher_sum')    
            st.session_state.dfs_sum[selected_ser_sum+"_sum"] = df_sum
        




        

# === –í–∫–ª–∞–¥–∫–∞ 10: –ö–æ–≥–µ—Ä–µ–Ω—Ç–Ω–µ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è ===
with tab10:
    
    
    st.subheader("–ö–æ–≥–µ—Ä–µ–Ω—Ç–Ω–µ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —à—É–º—É")
    # st.write(st.session_state.dfs.keys())
    
    subs_mode = st.radio(
    "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è:",
    ["–û–¥–Ω–∞ —Å–µ—Ä—ñ—è", "–î–≤—ñ —Å–µ—Ä—ñ—ó"],
    index=0  # –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–∏–±—Ä–∞–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç
    )
    
    data_geoph = {}
    
    if "plot_flag" not in st.session_state:
        st.session_state.plot_flag = False

    if "noisy_sig_plot" not in st.session_state:
        st.session_state.noisy_sig_plot = []
        
    if "ref_noise_plot" not in st.session_state:
        st.session_state.ref_noise_plot = []
    
    if "res_signal" not in st.session_state:
        st.session_state.res_signal = []
        
        
    if "selected_ser1" not in st.session_state:
        st.session_state.selected_ser1 = 0
    

    if subs_mode == "–û–¥–Ω–∞ —Å–µ—Ä—ñ—è":
        
        st.write("C–∏–≥–Ω–∞–ª")
        selected_ser_sub = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", list(st.session_state.dfs.keys()),key="sel_sub_one")
        st.write("–ì–µ–æ—Ñ–æ–Ω–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É")
        selected_geoph_sub = st.multiselect("–û–±–µ—Ä—ñ—Ç—å –≥–µ–æ—Ñ–æ–Ω–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", st.session_state.geoph_list,key="sel_subs")
        
        noisy_sig_len_s = 0.0
        if len(st.session_state.dfs)>0 and selected_ser_sub and selected_geoph_sub:
            noisy_sig_df = st.session_state.dfs[selected_ser_sub][selected_geoph_sub]
            
            noisy_sig_len_s = len(noisy_sig_df)/fs
        


        
        st.subheader("üéöÔ∏è –ß–∞—Å–æ–≤—ñ –≤—ñ–∫–Ω–∞ —Å–∏–≥–Ω–∞–ª—É —Ç–∞ —à—É–º—É")
        
        with st.form("subs_window_form", clear_on_submit=False):
            
                      
 

            # print(selected_ser1)
            # breakpoint()


            if selected_ser_sub:
                st.subheader("–û–±—Ä–∞–Ω–æ —Å–µ—Ä—ñ—é "+selected_ser_sub)
            
            

            col1, col2 = st.columns(2)
            with col1:
                subs_min_time_s = st.number_input("üîª –ü–æ—á–∞—Ç–æ–∫ —Å–∏–≥–Ω–∞–ª—É", min_value=0.0, value=2.53, step=0.1, format="%.4f" , key='subs_min_time_sig')
            with col2:
                subs_max_time_s = st.number_input("üî∫ –ö—ñ–Ω–µ—Ü—å —Å–∏–≥–Ω–∞–ª—É", min_value=0.0, value=noisy_sig_len_s, step=0.1, format="%.4f", key='subs_max_time_sig')
            col1, col2 = st.columns(2)
            with col1:
                subs_min_time_n = st.number_input("üîª –ü–æ—á–∞—Ç–æ–∫ —à—É–º—É", min_value=0.0, value=noisy_sig_len_s, step=0.1, format="%.4f", key='subs_min_time_noise')
            with col2:
                subs_max_time_n = st.number_input("üî∫ –ö—ñ–Ω–µ—Ü—å —à—É–º—É", min_value=0.0, value=noisy_sig_len_s, step=0.1, format="%.4f", key='subs_max_time_noise')


            
            sig_len = subs_max_time_s-subs_min_time_s
            noise_len = subs_max_time_n-subs_min_time_n
            st.write(f"–î–æ–≤–∂–∏–Ω–∞ —Å–∏–≥–Ω–∞–ª—É {sig_len:.4f} c")
            st.write(f"–î–æ–≤–∂–∏–Ω–∞ —à—É–º—É {noise_len:.4f} c")
            
            
            # seg_len_s = st.number_input("–î–æ–≤–∂–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–∏, —Å", min_value=0.0, value=0.02, step=0.1, format="%.4f", key='subs_nperseg')
            # overlap_s = st.number_input("–í–µ–ª–∏—á–∏–Ω–∞ –ø–µ—Ä–µ–∫—Ä–∏—Ç—Ç—è –º—ñ–∂ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏, —Å", min_value=0.0, value=0.018, step=0.01, format="%.4f", key='subs_noverlap')


            st.write("–ü–æ—Ä—ñ–≥ —á—É—Ç–ª–∏–≤–æ—Å—Ç—ñ –º–∞—Å–∫–∏ –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—ñ") 
            st.write("–ú–µ–Ω—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è (~0.0) ‚Üí –º–∞—Å–∫–∞ —á—É—Ç–ª–∏–≤—ñ—à–∞, –±—ñ–ª—å—à–µ —á–∞—Å—Ç–æ—Ç –≤–≤–∞–∂–∞—é—Ç—å—Å—è –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–∏–º–∏ ‚Üí –∞–≥—Ä–µ—Å–∏–≤–Ω—ñ—à–µ –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—è.")
            st.write("–ë—ñ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è (~0.2‚Äì0.3) ‚Üí –º–µ–Ω—à–µ —á–∞—Å—Ç–æ—Ç –ø–µ—Ä–µ–≤–∏—â—É—é—Ç—å –ø–æ—Ä—ñ–≥ ‚Üí –º‚Äô—è–∫—ñ—à–µ –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—è.")
            st.write("–ó–Ω–∞—á–µ–Ω–Ω—è >0.3 ‚Üí –¥—É–∂–µ –æ–±–µ—Ä–µ–∂–Ω–µ –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—è")

            coherence_threshold = st.number_input("–ü–æ—Ä—ñ–≥ —á—É—Ç–ª–∏–≤–æ—Å—Ç—ñ", min_value=0.0, value=0.9, step=0.1, key='subs_coher_thersh')
            
            st.write("–Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—è –∫–æ–Ω—Ç—Ä–æ–ª—é—î, –Ω–∞—Å–∫—ñ–ª—å–∫–∏ —Å–∏–ª—å–Ω–æ –∑–∞–≥–ª—É—à—É—î—Ç—å—Å—è —Å–ø–µ–∫—Ç—Ä —É —Ç–æ—á–∫–∞—Ö, –¥–µ –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω—ñ—Å—Ç—å –≤–∏—Å–æ–∫–∞.")
            st.write("1.0 (–º–∞–∫—Å–∏–º—É–º) ‚Äî –ø–æ–≤–Ω–µ –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—è –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç.")
            st.write("0.0 ‚Äî –≤–∑–∞–≥–∞–ª—ñ –Ω–µ –ø—Ä–∏–≥–ª—É—à—É—î—Ç—å—Å—è, –ª–∏—à–µ –æ—Ü—ñ–Ω—é—î—Ç—å—Å—è.")
            st.write("0.3‚Äì0.7 ‚Äî –º‚Äô—è–∫–µ –∑–≥–∞—Å–∞–Ω–Ω—è –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–∏—Ö –¥—ñ–ª—è–Ω–æ–∫ –±–µ–∑ –∞–≥—Ä–µ—Å–∏–≤–Ω–æ–≥–æ –≤–∏—Ä—ñ–∑–∞–Ω–Ω—è.")
            
            suppression_strength = st.number_input("–Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—è", min_value=0.0, value=1.0, step=0.1, key='subs_suppr_strength')
            
            st.write("win_len. –î–æ–≤–∂–∏–Ω–∞ –∫–æ–≤–∑–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ (–Ω–µ–ø–∞—Ä–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥–ª—ñ–∫—ñ–≤)")
            st.write("–û–±–∏—Ä–∞—î—Ç—å—Å—è –∑–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é –ø–æ–¥—ñ—ó (—ñ–º–ø—É–ª—å—Å—É).")
            st.write("–ú–∞—î –±—É—Ç–∏ –ø—Ä–∏–±–ª–∏–∑–Ω–æ 1‚Äì2√ó –¥–æ–≤–∂–∏–Ω–∏ –ø–æ–¥—ñ—ó, —è–∫—É —Ö–æ—á–µ–º–æ –≤–∏—è–≤–∏—Ç–∏/–ø—Ä–∏–≥–ª—É—à–∏—Ç–∏.")
            st.write("–¢–∏–ø–æ–≤–æ: 101‚Äì301 –¥–ª—è —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–æ–≤–∂–∏–Ω–æ—é –∫—ñ–ª—å–∫–∞ —Ç–∏—Å—è—á –≤—ñ–¥–ª—ñ–∫—ñ–≤.")
            st.write("–ó–∞–Ω–∞–¥—Ç–æ –º–∞–ª–µ ‚Üí —à—É–º–Ω—ñ –æ—Ü—ñ–Ω–∫–∏, —Å—Ç—Ä–∏–±–∫–∏;")
            st.write("–∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ ‚Üí –≤—Ç—Ä–∞—Ç–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó (—Ü—ñ–ª—å ¬´–∑–º–∞–∑—É—î—Ç—å—Å—è¬ª).")
            
            win_len = int(st.number_input("–î–æ–≤–∂–∏–Ω–∞ –∫–æ–≤–∑–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ (–Ω–µ–ø–∞—Ä–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥–ª—ñ–∫—ñ–≤)", min_value=0, value=201, step=1, key='subs_win_len'))
            
            st.write("smooth_alpha. –ó–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∞ –º–∞—Å—à—Ç–∞–±—É Œ±")
            st.write("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏–ª–∏ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è.")
            st.write("–ú–∞—î –±—É—Ç–∏ –ø—Ä–∏–±–ª–∏–∑–Ω–æ 1‚Äì2√ó –¥–æ–≤–∂–∏–Ω–∏ –ø–æ–¥—ñ—ó, —è–∫—É —Ö–æ—á–µ–º–æ –≤–∏—è–≤–∏—Ç–∏/–ø—Ä–∏–≥–ª—É—à–∏—Ç–∏.")
            st.write("–¢–∏–ø–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è: 0.1‚Äì0.3 √ó win_len.")
            st.write("–ó–∞–Ω–∞–¥—Ç–æ –º–∞–ª–µ ‚Üí Œ± ¬´—Å—Ç—Ä–∏–±–∞—î¬ª, –≤–∏–Ω–∏–∫–∞—î –Ω–µ–¥–æ/–ø–µ—Ä–µ–≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è;")
            st.write("–∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ ‚Üí –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —Ä–æ–∑–º–∞–∑—É—î—Ç—å—Å—è –Ω–∞ —Å—É—Å—ñ–¥–Ω—ñ —Ç–æ—á–∫–∏")
            
            smooth_alpha = int(st.number_input("–∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∞ –º–∞—Å—à—Ç–∞–±—É Œ± (—á–∏—Å–ª–æ –≤—ñ–¥–ª—ñ–∫—ñ–≤)", min_value=0, value=int(0.15*win_len), step=1, key='subs_smooth_alpha'))
            
            st.write("smooth_gamma. –ó–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫–∞ –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—ñ Œ≥¬≤")
            st.write("–ú–∞—î –±—É—Ç–∏ –º–µ–Ω—à–∏–º –∑–∞ smooth_alpha, —â–æ–± –Ω–µ –≤—Ç—Ä–∞—Ç–∏—Ç–∏ –∫–æ—Ä–æ—Ç–∫—ñ –ø–æ–¥—ñ—ó.")
            st.write("–¢–∏–ø–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è: 0.05‚Äì0.2 √ó win_len.")
            st.write("–ó–∞–Ω–∞–¥—Ç–æ –º–∞–ª–µ ‚Üí –º–∞—Å–∫–∞ ¬´–º–µ—Ä–µ—Ö—Ç–∏—Ç—å¬ª (–¥—ñ—Ä–∫–∏ –≤ –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ñ);")
            st.write("–∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ ‚Üí –∫–æ—Ä–æ—Ç–∫—ñ —Ü—ñ–ª—ñ —Ç–µ–∂ –ø—Ä–∏–¥—É—à—É—é—Ç—å—Å—è.")
            st.write("–∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ ‚Üí –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —Ä–æ–∑–º–∞–∑—É—î—Ç—å—Å—è –Ω–∞ —Å—É—Å—ñ–¥–Ω—ñ —Ç–æ—á–∫–∏")
            
            smooth_gamma = int(st.number_input("–ó–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫–∞ –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—ñ Œ≥¬≤ (—á–∏—Å–ª–æ –≤—ñ–¥–ª—ñ–∫—ñ–≤)", min_value=0, value=int(0.2*win_len), step=1, key='subs_smooth_gamma'))
            
            
            # method_delay_subs = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–æ–∫:", ['gcc_phat', 'envelope', 'cross_correlation', 'rms_envelope'],key="sel_method_delay_subs")
          
            plot_figs_s = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –∞–º–ø–ª—ñ—Ç—É–¥–∞-—á–∞—Å –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É", value=False, key='plot_figs_s')
            plot_figs_n = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –∞–º–ø–ª—ñ—Ç—É–¥–∞-—á–∞—Å —à—É–º—É", value=False, key='plot_figs_n')
            plot_figs_r = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –∞–º–ø–ª—ñ—Ç—É–¥–∞-—á–∞—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è", value=False, key='plot_figs_r')
            
            plot_spectr_s = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º—É –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É", value=False, key='plot_spectr_s')
            plot_spectr_n = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º—É —à—É–º—É", value=False, key='plot_spectr_n')
            plot_spectr_r = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è", value=False, key='plot_spectr_r')
            
            plot_psd_s = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ PSD –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É", value=False, key='plot_psd_s')
            plot_psd_n = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ PSD —à—É–º—É", value=False, key='plot_psd_n')
            plot_psd_r = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ PSD —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è", value=False, key='plot_psd_r')
            
            plot_vpf_s = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ VPF –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É", value=False, key='plot_vpf_s')
            plot_vpf_n = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ VPF —à—É–º—É", value=False, key='plot_vpf_n')
            plot_vpf_r = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ VPF —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è", value=False, key='plot_vpf_r')
            
            # print(selected_ser1)
            # breakpoint()
            
            submitted = st.form_submit_button("‚öôÔ∏è –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –≤—ñ–∫–Ω–æ")
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
            
            # print(selected_ser1)
            # print(st.session_state.selected_ser1)
            # breakpoint()            
        if submitted:
            
            st.session_state.selected_ser1 = selected_ser_sub
            st.write("–û–±—Ä–∞–Ω–æ —Å–µ—Ä—ñ—é "+selected_ser_sub)
            
            # print(selected_ser1)
            # print(st.session_state.selected_ser1)
            # breakpoint()       

            noisy_sig_df_cut = ssp.cut_dataframe_time_window(noisy_sig_df, fs=fs, start_time=subs_min_time_s, end_time=subs_max_time_s)
            ref_noise_df_cut = ssp.cut_dataframe_time_window(noisy_sig_df, fs=fs, start_time=subs_min_time_n, end_time=subs_max_time_n)
            ref_noise_df_cut = ref_noise_df_cut[0:len(noisy_sig_df_cut)]
            
        
            delay_list = []
            for geoph in selected_geoph_sub: #['X1','Y11','Y12','Z1','X2','Y21','Y22','Z2','X3','Y31','Y32','Z3']: 
                # signal, delay, _, _, _, _, _ = ssp.coherent_subtraction_adaptive(noisy_sig_df_cut[geoph], 
                #                                                              ref_noise_df_cut[geoph], 
                #                                                              seg_len_s=seg_len_s, 
                #                                                              overlap_s=overlap_s,
                #                                                              coherence_bias=coherence_threshold, 
                #                                                              suppression_strength=suppression_strength, 
                #                                                              delay_method=method_delay_subs, 
                #                                                              max_lag_s=None,
                #                                                              freq_limit=None)
                
                
                signal, delay, _, _  =  ssp.coherent_subtraction_adaptive_1d(noisy_sig_df_cut[geoph],
                                                                         ref_noise_df_cut[geoph],
                                                                         fs=fs,
                                                                         win_len=win_len,
                                                                         corr_threshold=coherence_threshold,
                                                                         suppression_strength=suppression_strength,
                                                                         smooth_alpha=smooth_alpha,
                                                                         smooth_gamma=smooth_gamma
                                                                         )
                
                
                
                signal = signal[:len(noisy_sig_df_cut)]
                data_geoph[geoph] = signal
                
                delay_list.append(delay)
                
            st.session_state.plot_flag = True
            
            cleaned_sig_df = pd.DataFrame(data_geoph)
            st.session_state.dfs_sub[st.session_state.selected_ser1+"_sub_one"] = cleaned_sig_df
            
  
            st.session_state.noisy_sig_plot = noisy_sig_df_cut
            st.session_state.ref_noise_plot = ref_noise_df_cut
            st.session_state.res_signal = cleaned_sig_df
            
            selected_ser1_sub = None
            
            delays = pd.DataFrame(delay_list, index=selected_geoph_sub)
            
            st.dataframe(delays)

                
    
    if subs_mode == "–î–≤—ñ —Å–µ—Ä—ñ—ó":

        st.write("1–π —Å–∏–≥–Ω–∞–ª")
        selected_ser1_sub = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", list(st.session_state.dfs.keys()),key="sel_sub1")
        # selected_seism1 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø–∏ –≥–µ–æ—Ñ–æ–Ω—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", ['X1','Y11','Y12','Z1','X2','Y21','Y22','Z2','X3','Y31','Y32','Z3'],key="select12")
        st.write("2–π —Å–∏–≥–Ω–∞–ª (—à—É–º)")
        selected_ser2_sub = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", list(st.session_state.dfs.keys()),key="sel_sub2")        
        st.write("–ì–µ–æ—Ñ–æ–Ω–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É")
        selected_geoph_sub = st.multiselect("–û–±–µ—Ä—ñ—Ç—å –≥–µ–æ—Ñ–æ–Ω–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", st.session_state.geoph_list+st.session_state.im_geoph_list,key="sel_subs")
        
        noisy_sig_len_s = 0.0
        ref_noise_len_s = 0.0 
        
        if len(st.session_state.dfs)>0:

            noisy_sig_df = st.session_state.dfs[selected_ser1_sub][selected_geoph_sub]
            ref_noise_df = st.session_state.dfs[selected_ser2_sub][selected_geoph_sub]
            
            noisy_sig_len_s = len(noisy_sig_df)/fs
            ref_noise_len_s = len(ref_noise_df)/fs

        with st.form("subs_window_form2", clear_on_submit=False):    
            
            
            if selected_ser1_sub:
                st.subheader("–û–±—Ä–∞–Ω–æ —Å–µ—Ä—ñ—é —Å–∏–≥–Ω–∞–ª—É "+selected_ser1_sub)
            if selected_ser2_sub:
                st.subheader("–û–±—Ä–∞–Ω–æ —Å–µ—Ä—ñ—é —à—É–º—É "+selected_ser2_sub)
            
            if len(st.session_state.dfs)>0:

                
                col1, col2 = st.columns(2)
                with col1:
                    subs_min_time_s = st.number_input("üîª –ü–æ—á–∞—Ç–æ–∫ —Å–∏–≥–Ω–∞–ª—É", min_value=0.0, value=0.0, step=0.1, format="%.4f", key='subs_min_time_sig2')
                with col2:
                    subs_max_time_s = st.number_input("üî∫ –ö—ñ–Ω–µ—Ü—å —Å–∏–≥–Ω–∞–ª—É", min_value=0.0, value=noisy_sig_len_s, step=0.1, format="%.4f", key='subs_max_time_sig2')
                col1, col2 = st.columns(2)
                with col1:
                    subs_min_time_n = st.number_input("üîª –ü–æ—á–∞—Ç–æ–∫ —à—É–º—É", min_value=0.0, value=0.0, step=0.1, format="%.4f", key='subs_min_time_noise2')
                with col2:
                    subs_max_time_n = st.number_input("üî∫ –ö—ñ–Ω–µ—Ü—å —à—É–º—É", min_value=0.0, value=ref_noise_len_s, step=0.1, format="%.4f", key='subs_max_time_noise2')
                
                sig_len = subs_max_time_s-subs_min_time_s
                noise_len = subs_max_time_n-subs_min_time_n
                sig_len_samples = sig_len * fs 
                noise_len_samples = noise_len * fs
                
                st.write(f"–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü—ñ—ó {fs:.4f} –ì—Ü")
                
                st.write(f"–î–æ–≤–∂–∏–Ω–∞ —Å–∏–≥–Ω–∞–ª—É {sig_len:.4f} c")
                st.write(f"–î–æ–≤–∂–∏–Ω–∞ —à—É–º—É {noise_len:.4f} c")
                
                st.write(f"–î–æ–≤–∂–∏–Ω–∞ —Å–∏–≥–Ω–∞–ª—É —É –≤—ñ–¥–ª—ñ–∫–∞—Ö (samples). {sig_len_samples:.0f}")
                st.write(f"–î–æ–≤–∂–∏–Ω–∞ —à—É–º—É —É –≤—ñ–¥–ª—ñ–∫–∞—Ö (samples). {noise_len_samples:.0f}")
                
                
                # seg_len_s = st.number_input("–î–æ–≤–∂–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–∏, —Å", min_value=0.0, value=0.02, step=0.1, format="%.4f", key='subs_nperseg')
                # overlap_s = st.number_input("–í–µ–ª–∏—á–∏–Ω–∞ –ø–µ—Ä–µ–∫—Ä–∏—Ç—Ç—è –º—ñ–∂ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏, —Å", min_value=0.0, value=0.018, step=0.01, format="%.4f", key='subs_noverlap')
    
    
                st.subheader("–ü–æ—Ä—ñ–≥ —á—É—Ç–ª–∏–≤–æ—Å—Ç—ñ –º–∞—Å–∫–∏ –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—ñ") 
                st.write("–ú–µ–Ω—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è (~0.0) ‚Üí –º–∞—Å–∫–∞ —á—É—Ç–ª–∏–≤—ñ—à–∞, –±—ñ–ª—å—à–µ —á–∞—Å—Ç–æ—Ç –≤–≤–∞–∂–∞—é—Ç—å—Å—è –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–∏–º–∏ ‚Üí –∞–≥—Ä–µ—Å–∏–≤–Ω—ñ—à–µ –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—è.")
                st.write("–ë—ñ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è (~0.2‚Äì0.3) ‚Üí –º–µ–Ω—à–µ —á–∞—Å—Ç–æ—Ç –ø–µ—Ä–µ–≤–∏—â—É—é—Ç—å –ø–æ—Ä—ñ–≥ ‚Üí –º‚Äô—è–∫—ñ—à–µ –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—è.")
                st.write("–ó–Ω–∞—á–µ–Ω–Ω—è >0.3 ‚Üí –¥—É–∂–µ –æ–±–µ—Ä–µ–∂–Ω–µ –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—è")
    
                coherence_threshold = st.number_input("–ü–æ—Ä—ñ–≥ —á—É—Ç–ª–∏–≤–æ—Å—Ç—ñ", min_value=0.0, value=0.9, step=0.1, key='subs_coher_thersh2')
                
                st.subheader("–Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—è ")
                st.write("–ö–æ–Ω—Ç—Ä–æ–ª—é—î –Ω–∞—Å–∫—ñ–ª—å–∫–∏ —Å–∏–ª—å–Ω–æ –∑–∞–≥–ª—É—à—É—î—Ç—å—Å—è —Å–ø–µ–∫—Ç—Ä —É —Ç–æ—á–∫–∞—Ö, –¥–µ –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω—ñ—Å—Ç—å –≤–∏—Å–æ–∫–∞.")
                st.write("1.0 (–º–∞–∫—Å–∏–º—É–º) ‚Äî –ø–æ–≤–Ω–µ –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—è –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç.")
                st.write("0.0 ‚Äî –≤–∑–∞–≥–∞–ª—ñ –Ω–µ –ø—Ä–∏–≥–ª—É—à—É—î—Ç—å—Å—è, –ª–∏—à–µ –æ—Ü—ñ–Ω—é—î—Ç—å—Å—è.")
                st.write("0.3‚Äì0.7 ‚Äî –º‚Äô—è–∫–µ –∑–≥–∞—Å–∞–Ω–Ω—è –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–∏—Ö –¥—ñ–ª—è–Ω–æ–∫ –±–µ–∑ –∞–≥—Ä–µ—Å–∏–≤–Ω–æ–≥–æ –≤–∏—Ä—ñ–∑–∞–Ω–Ω—è.")
                
                suppression_strength = st.number_input("–Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—è", min_value=0.0, value=1.0, step=0.1, key='subs_suppr_strength2')
                
                st.subheader("win_len. –î–æ–≤–∂–∏–Ω–∞ –∫–æ–≤–∑–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ (–Ω–µ–ø–∞—Ä–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥–ª—ñ–∫—ñ–≤)")
                st.write("–û–±–∏—Ä–∞—î—Ç—å—Å—è –∑–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é –ø–æ–¥—ñ—ó (—ñ–º–ø—É–ª—å—Å—É).")
                st.write("–ú–∞—î –±—É—Ç–∏ –ø—Ä–∏–±–ª–∏–∑–Ω–æ 1‚Äì2√ó –¥–æ–≤–∂–∏–Ω–∏ –ø–æ–¥—ñ—ó, —è–∫—É —Ö–æ—á–µ–º–æ –≤–∏—è–≤–∏—Ç–∏/–ø—Ä–∏–≥–ª—É—à–∏—Ç–∏.")
                st.write("–¢–∏–ø–æ–≤–æ: 101‚Äì301 –¥–ª—è —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–æ–≤–∂–∏–Ω–æ—é –∫—ñ–ª—å–∫–∞ —Ç–∏—Å—è—á –≤—ñ–¥–ª—ñ–∫—ñ–≤.")
                st.write("–ó–∞–Ω–∞–¥—Ç–æ –º–∞–ª–µ ‚Üí —à—É–º–Ω—ñ –æ—Ü—ñ–Ω–∫–∏, —Å—Ç—Ä–∏–±–∫–∏;")
                st.write("–∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ ‚Üí –≤—Ç—Ä–∞—Ç–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó (—Ü—ñ–ª—å ¬´–∑–º–∞–∑—É—î—Ç—å—Å—è¬ª).")
                
                win_len = int(st.number_input("–î–æ–≤–∂–∏–Ω–∞ –∫–æ–≤–∑–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ (–Ω–µ–ø–∞—Ä–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥–ª—ñ–∫—ñ–≤)", min_value=0, value=201, step=1, key='subs_win_len2'))
                
                st.subheader("smooth_alpha. –ó–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∞ –º–∞—Å—à—Ç–∞–±—É Œ±")
                st.write("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏–ª–∏ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è.")
                st.write("–ú–∞—î –±—É—Ç–∏ –ø—Ä–∏–±–ª–∏–∑–Ω–æ 1‚Äì2√ó –¥–æ–≤–∂–∏–Ω–∏ –ø–æ–¥—ñ—ó, —è–∫—É —Ö–æ—á–µ–º–æ –≤–∏—è–≤–∏—Ç–∏/–ø—Ä–∏–≥–ª—É—à–∏—Ç–∏.")
                st.write("–¢–∏–ø–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è: 0.1‚Äì0.3 √ó win_len.")
                st.write("–ó–∞–Ω–∞–¥—Ç–æ –º–∞–ª–µ ‚Üí Œ± ¬´—Å—Ç—Ä–∏–±–∞—î¬ª, –≤–∏–Ω–∏–∫–∞—î –Ω–µ–¥–æ/–ø–µ—Ä–µ–≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è;")
                st.write("–∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ ‚Üí –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —Ä–æ–∑–º–∞–∑—É—î—Ç—å—Å—è –Ω–∞ —Å—É—Å—ñ–¥–Ω—ñ —Ç–æ—á–∫–∏")
                
                smooth_alpha = int(st.number_input("–∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∞ –º–∞—Å—à—Ç–∞–±—É Œ± (—á–∏—Å–ª–æ –≤—ñ–¥–ª—ñ–∫—ñ–≤)", min_value=0, value=int(0.15*win_len), step=1, key='subs_smooth_alpha2'))
                
                st.subheader("smooth_gamma. –ó–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫–∞ –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—ñ Œ≥¬≤")
                st.write("–ú–∞—î –±—É—Ç–∏ –º–µ–Ω—à–∏–º –∑–∞ smooth_alpha, —â–æ–± –Ω–µ –≤—Ç—Ä–∞—Ç–∏—Ç–∏ –∫–æ—Ä–æ—Ç–∫—ñ –ø–æ–¥—ñ—ó.")
                st.write("–¢–∏–ø–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è: 0.05‚Äì0.2 √ó win_len.")
                st.write("–ó–∞–Ω–∞–¥—Ç–æ –º–∞–ª–µ ‚Üí –º–∞—Å–∫–∞ ¬´–º–µ—Ä–µ—Ö—Ç–∏—Ç—å¬ª (–¥—ñ—Ä–∫–∏ –≤ –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ñ);")
                st.write("–∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ ‚Üí –∫–æ—Ä–æ—Ç–∫—ñ —Ü—ñ–ª—ñ —Ç–µ–∂ –ø—Ä–∏–¥—É—à—É—é—Ç—å—Å—è.")
                st.write("–∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ ‚Üí –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —Ä–æ–∑–º–∞–∑—É—î—Ç—å—Å—è –Ω–∞ —Å—É—Å—ñ–¥–Ω—ñ —Ç–æ—á–∫–∏")
                
                smooth_gamma = int(st.number_input("–ó–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫–∞ –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—ñ Œ≥¬≤ (—á–∏—Å–ª–æ –≤—ñ–¥–ª—ñ–∫—ñ–≤)", min_value=0, value=int(0.2*win_len), step=1, key='subs_smooth_gamma2'))


                plot_figs_s = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –∞–º–ø–ª—ñ—Ç—É–¥–∞-—á–∞—Å –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É", value=False, key='plot_figs_s2')
                plot_figs_n = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –∞–º–ø–ª—ñ—Ç—É–¥–∞-—á–∞—Å —à—É–º—É", value=False, key='plot_figs_n2')
                plot_figs_r = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –∞–º–ø–ª—ñ—Ç—É–¥–∞-—á–∞—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è", value=False, key='plot_figs_r2')
                
                plot_spectr_s = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º—É –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É", value=False, key='plot_spectr_s2')
                plot_spectr_n = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º—É —à—É–º—É", value=False, key='plot_spectr_n2')
                plot_spectr_r = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è", value=False, key='plot_spectr_r2')
                
                plot_psd_s = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ PSD –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É", value=False, key='plot_psd_s2')
                plot_psd_n = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ PSD —à—É–º—É", value=False, key='plot_psd_n2')
                plot_psd_r = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ PSD —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è", value=False, key='plot_psd_r2')
                
                plot_vpf_s = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ VPF –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É", value=False, key='plot_vpf_s2')
                plot_vpf_n = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ VPF —à—É–º—É", value=False, key='plot_vpf_n2')
                plot_vpf_r = st.checkbox("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ VPF —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è", value=False, key='plot_vpf_r2')

                
                
                submitted = st.form_submit_button("‚öôÔ∏è –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")
                
        if submitted:
            
            st.session_state.selected_ser1 = selected_ser1_sub
            # st.session_state.selected_ser2 = selected_ser2
            st.write("–û–±—Ä–∞–Ω–æ —Å–µ—Ä—ñ—é —Å–∏–≥–Ω–∞–ª—É "+selected_ser1_sub)
            st.write("–û–±—Ä–∞–Ω–æ —Å–µ—Ä—ñ—é —à—É–º—É "+selected_ser2_sub)
            
            # print(selected_ser1)
            # print(st.session_state.selected_ser1)
            # breakpoint()       
               
            
            noisy_sig_df_cut = ssp.cut_dataframe_time_window(st.session_state.dfs[selected_ser1_sub], fs=fs, start_time=subs_min_time_s, end_time=subs_max_time_s)
            ref_noise_df_cut = ssp.cut_dataframe_time_window(st.session_state.dfs[selected_ser2_sub], fs=fs, start_time=subs_min_time_n, end_time=subs_max_time_n)
            ref_noise_df_cut = ref_noise_df_cut[0:len(noisy_sig_df_cut)]

            delay_list = []
            
            for geoph in selected_geoph_sub: # ['X1','Y11','Y12','Z1','X2','Y21','Y22','Z2','X3','Y31','Y32','Z3']: 
                # signal, delay, _, _, _, _, _ = ssp.coherent_subtraction_aligned_with_mask(noisy_sig_df_cut[geoph], 
                #                                                                       ref_noise_df_cut[geoph], 
                #                                                                       seg_len_s=seg_len_s, 
                #                                                                       overlap_s=overlap_s,
                #                                                                       coherence_threshold=coherence_threshold)
                
                # signal, delay, _, _, _, _, _ = ssp.coherent_subtraction_adaptive(noisy_sig_df_cut[geoph], 
                #                                                                       ref_noise_df_cut[geoph], 
                #                                                                       seg_len_s=seg_len_s, 
                #                                                                       overlap_s=overlap_s,
                                                                                      
                #                                                                       coherence_bias=coherence_threshold, 
                #                                                                       suppression_strength=suppression_strength, 
                #                                                                       delay_method=method_delay_subs, 
                #                                                                       max_lag_s=None,
                #                                                                       freq_limit=None)

                signal, delay, _, _  =  ssp.coherent_subtraction_adaptive_1d(noisy_sig_df_cut[geoph],
                                                                         ref_noise_df_cut[geoph],
                                                                         fs=fs,
                                                                         win_len=win_len,
                                                                         corr_threshold=coherence_threshold,
                                                                         suppression_strength=suppression_strength,
                                                                         smooth_alpha=smooth_alpha,
                                                                         smooth_gamma=smooth_gamma
                                                                         )

                
                signal = signal[:len(st.session_state.dfs[selected_ser1_sub][geoph])]
                data_geoph[geoph] = signal
                
                delay_list.append(delay)
                
           
            st.session_state.plot_flag = True
            
            cleaned_sig_df = pd.DataFrame(data_geoph)
            st.session_state.dfs_sub[selected_ser1_sub+"_sub_two"] = cleaned_sig_df
            
            
            st.session_state.noisy_sig_plot = noisy_sig_df_cut
            st.session_state.ref_noise_plot = ref_noise_df_cut
            st.session_state.res_signal = cleaned_sig_df
            
            selected_ser1_sub = None
            
            delays = pd.DataFrame(delay_list, index=selected_geoph_sub)
            
            st.dataframe(delays)



    
    if st.session_state.plot_flag:
        
        # df = ssp.vpf_df(st.session_state.res_signal, fs)                        
        # if subs_mode == "–î–≤—ñ —Å–µ—Ä—ñ—ó":
        #     st.session_state.dfs_vpf[st.session_state.selected_ser1+"_subtract__vpf"] = df
        # if subs_mode == "–û–¥–Ω–∞ —Å–µ—Ä—ñ—è":
        #     st.session_state.dfs_vpf[st.session_state.selected_ser1+"_subtract_cut__vpf"] = df
            
        signal_vpf = ssp.vpf_df(st.session_state.noisy_sig_plot, fs)
        noise_vpf = ssp.vpf_df(st.session_state.ref_noise_plot, fs)                         
        snr_df = ssp.compute_snr_df(signal_vpf, noise_vpf)
        st.subheader("–í—ñ–¥–Ω–æ—à–µ–Ω–Ω—è SNR")
        st.dataframe(snr_df)

    
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ–≥–æ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è")
        if len(df):
            
            st.subheader("–°–µ—Ä—ñ—è —Å–∏–≥–Ω–∞–ª—É: "+st.session_state.selected_ser1)
            if plot_figs_s or plot_figs_n or plot_figs_r:

                st.subheader("–ì—Ä–∞—Ñ—ñ–∫ –∞–º–ø–ª—ñ—Ç—É–¥–∞-—á–∞—Å")
                one_plot_subs = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –≥–µ–æ—Ñ–æ–Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º—É –≥—Ä–∞—Ñ—ñ–∫—É", value=True, key='one_plot_subs')
                
                if plot_figs_s: 
                    st.subheader("–ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª")
                    if one_plot_subs:
                        st.plotly_chart(ssp.plot_time_signals(st.session_state.noisy_sig_plot, fs, n_cols=n_cols_plots, threshold=0.5, columns=selected_geoph_sub, mode="plotly_one"), use_container_width=True, key='plot_one_subs_s'+filename)
                    else:
                        st.plotly_chart(ssp.plot_time_signals(st.session_state.noisy_sig_plot, fs, n_cols=n_cols_plots, threshold=0.5, columns=selected_geoph_sub, mode="plotly"), use_container_width=True, key='plot_many_subs_s'+filename)

                if plot_figs_n: 
                    st.subheader("–®—É–º")
                    if one_plot_subs:
                        st.plotly_chart(ssp.plot_time_signals(st.session_state.ref_noise_plot, fs, n_cols=n_cols_plots, threshold=0.5, columns=selected_geoph_sub, mode="plotly_one"), use_container_width=True, key='plot_one_subs_n'+filename)
                    else:
                        st.plotly_chart(ssp.plot_time_signals(st.session_state.ref_noise_plot, fs, n_cols=n_cols_plots, threshold=0.5, columns=selected_geoph_sub, mode="plotly"), use_container_width=True, key='plot_many_subs_n'+filename)

                if plot_figs_r: 
                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è")
                    if one_plot_subs:
                        st.plotly_chart(ssp.plot_time_signals(st.session_state.res_signal, fs, n_cols=n_cols_plots, threshold=0.5, columns=selected_geoph_sub, mode="plotly_one"), use_container_width=True, key='plot_one_subs_r'+filename)
                    else:
                        st.plotly_chart(ssp.plot_time_signals(st.session_state.res_signal, fs, n_cols=n_cols_plots, threshold=0.5, columns=selected_geoph_sub, mode="plotly"), use_container_width=True, key='plot_many_subs_r'+filename)


            if plot_spectr_s or plot_spectr_n or plot_spectr_r:

                st.subheader("–°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞")
                
                if plot_spectr_s: 
                    st.subheader("–ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª")
                   
                    st.pyplot(ssp.spectr_plot(st.session_state.noisy_sig_plot, fs, n_cols=n_cols_plots, columns=selected_geoph_sub), use_container_width=True)
                   

                if plot_spectr_n: 
                    st.subheader("–®—É–º")
                    
                    st.pyplot(ssp.spectr_plot(st.session_state.ref_noise_plot, fs, n_cols=n_cols_plots, columns=selected_geoph_sub), use_container_width=True)
                    
                if plot_spectr_r: 
                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è")
                    st.pyplot(ssp.spectr_plot(st.session_state.res_signal, fs, n_cols=n_cols_plots, columns=selected_geoph_sub), use_container_width=True)
                    

            if plot_psd_s or plot_psd_n or plot_psd_r:

                st.subheader("–ì—Ä–∞—Ñ—ñ–∫ PSD")
                db_scale_subs = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –≤ —à–∫–∞–ª—ñ –¥–µ—Ü–∏–±–µ–ª, –¥–ë", value=True, key='db_scale_subs')
                
                if plot_psd_s: 
                    st.subheader("–ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª")
                    if db_scale_subs:
                        st.plotly_chart(ssp.psd_plot_df(st.session_state.noisy_sig_plot, fs, n_cols=n_cols_plots, columns=selected_geoph_sub, mode='plotly', scale='db'), use_container_width=True, key='plot_sub_psd1_s'+filename)
                    else:
                        st.plotly_chart(ssp.psd_plot_df(st.session_state.noisy_sig_plot, fs, n_cols=n_cols_plots, columns=selected_geoph_sub, mode='plotly', scale='energy'), use_container_width=True, key='plot_sub_psd2_s'+filename)

                if plot_psd_n: 
                    st.subheader("–®—É–º")
                    if db_scale_subs:
                        st.plotly_chart(ssp.psd_plot_df(st.session_state.ref_noise_plot, fs, n_cols=n_cols_plots, columns=selected_geoph_sub, mode='plotly', scale='db'), use_container_width=True, key='plot_sub_psd1_n'+filename)
                    else:
                        st.plotly_chart(ssp.psd_plot_df(st.session_state.ref_noise_plot, fs, n_cols=n_cols_plots, columns=selected_geoph_sub, mode='plotly', scale='energy'), use_container_width=True, key='plot_sub_psd2_n'+filename)

                if plot_psd_r: 
                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è")
                    if db_scale_subs:
                        st.plotly_chart(ssp.psd_plot_df(st.session_state.res_signal, fs, n_cols=n_cols_plots, columns=selected_geoph_sub, mode='plotly', scale='db'), use_container_width=True, key='plot_sub_psd1_r'+filename)
                    else:
                        st.plotly_chart(ssp.psd_plot_df(st.session_state.res_signal, fs, n_cols=n_cols_plots, columns=selected_geoph_sub, mode='plotly', scale='energy'), use_container_width=True, key='plot_sub_psd2_r'+filename)

            if plot_vpf_s or plot_vpf_n or plot_vpf_r:

                st.subheader("VPF")
                
                print(st.session_state.im_geoph_list)
                print(list(set(st.session_state.im_geoph_list) - {'im_power'}))
                # breakpoint()
                
                if plot_vpf_s: 
                    st.subheader("–ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª")
                    df = ssp.vpf_df(st.session_state.noisy_sig_plot, fs)
                    st.plotly_chart(ssp.plot_time_signals(df, fs, n_cols=n_cols_plots, threshold=0.5, columns=list(set(st.session_state.im_geoph_list) - {'im_power'}), mode="plotly_one"), use_container_width=True, key='plot_one_vpf_subs_s'+filename)
                   

                if plot_vpf_n: 
                    st.subheader("–®—É–º")
                    df = ssp.vpf_df(st.session_state.ref_noise_plot, fs)
                    st.plotly_chart(ssp.plot_time_signals(df, fs, n_cols=n_cols_plots, threshold=0.5, columns=list(set(st.session_state.im_geoph_list) - {'im_power'}), mode="plotly_one"), use_container_width=True, key='plot_one_vpf_subs_n'+filename)
                    
                if plot_vpf_r: 
                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è")
                    df = ssp.vpf_df(st.session_state.res_signal, fs)
                    st.plotly_chart(ssp.plot_time_signals(df, fs, n_cols=n_cols_plots, threshold=0.5, columns=list(set(st.session_state.im_geoph_list) - {'im_power'}), mode="plotly_one"), use_container_width=True, key='plot_one_vpf_subs_r'+filename)



# === –í–∫–ª–∞–¥–∫–∞ 11: –£—è–≤–Ω–∞ –µ–Ω–µ—Ä–≥—ñ—è ===
with tab11:
    st.subheader("–û–±—á–∏—Å–ª–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –ø–æ–ª—è—Ä–∏–∑–∞—Ü—ñ–π–Ω–æ—ó —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó")
    
    if len(st.session_state.dfs)>0:

        # angl1 = st.number_input("–ù–∞–ø—Ä—è–º –Ω–∞ –¥–∂–µ—Ä–µ–ª–æ —Å–µ–π—Å–º–æ–º–µ—Ç—Ä–∞ 1, –≥—Ä–∞–¥—É—Å–∏", min_value=0.0, value=0.0, step=10.0, key="energ_angl1")
        # angl2 = st.number_input("–ù–∞–ø—Ä—è–º –Ω–∞ –¥–∂–µ—Ä–µ–ª–æ —Å–µ–π—Å–º–æ–º–µ—Ç—Ä–∞ 2, –≥—Ä–∞–¥—É—Å–∏", min_value=0.0, value=0.0, step=10.0, key="energ_angl2")
        # angl3 = st.number_input("–ù–∞–ø—Ä—è–º –Ω–∞ –¥–∂–µ—Ä–µ–ª–æ —Å–µ–π—Å–º–æ–º–µ—Ç—Ä–∞ 3, –≥—Ä–∞–¥—É—Å–∏", min_value=0.0, value=0.0, step=10.0, key="energ_angl3")
        angl1 = 0
        angl2 = 0
        angl3 = 0
        series_vpf = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É:", list(st.session_state.dfs.keys()), key="energ_sel")
        
        seismometr_vpf = int(st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ–π—Å–º–æ–º–µ—Ç—Ä –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É:", st.session_state.true_indices, key="energ_sel_seism"))
        

        VrVz_dict = {}
        
        for i, (filename, data) in enumerate(st.session_state.dfs.items()):
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–ª–æ–Ω–∫–∏, —â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ 'X' —Ç–∞ 'Z'
            x_cols = sorted([col for col in data.columns if col.startswith('X')],
                            key=lambda x: x.lstrip('X'))
            z_cols = sorted([col for col in data.columns if col.startswith('Z')],
                            key=lambda x: x.lstrip('Z'))
            
            Vr = {}
            Vz = {}
        
            for col in x_cols:
                suffix = col[len('X'):]
                Vr[suffix] = [data[col]]  # –æ–±–≥–æ—Ä—Ç–∞—î–º–æ —É —Å–ø–∏—Å–æ–∫ 
        
            for col in z_cols:
                suffix = col[len('Z'):]
                Vz[suffix] = [-data[col]]  # —ñ–Ω–≤–µ—Ä—Å—ñ—è –∑–Ω–∞—á–µ–Ω—å
        
            VrVz_dict[filename + 'Vr'] = Vr
            VrVz_dict[filename + 'Vz'] = Vz                
                
                
       
        st.subheader("–ì—Ä–∞—Ñ—ñ–∫ –ì–∞–Ω–∫–µ–ª—è")
        st.plotly_chart(ssp.plot_hankel(np.array(VrVz_dict[series_vpf+'Vr'][str(seismometr_vpf)])[0], np.array(VrVz_dict[series_vpf+'Vz'][str(seismometr_vpf)])[0], scale=1.0, mode = 'plotly'),use_container_width=True, key="plot_hackl"+str(seismometr_vpf))
        st.subheader("–ì—Ä–∞—Ñ—ñ–∫ —É—è–≤–Ω–æ—ó –µ–Ω–µ—Ä–≥—ñ—ó")
        st.plotly_chart(ssp.vpf(np.array(VrVz_dict[series_vpf+'Vr'][str(seismometr_vpf)])[0], np.array(VrVz_dict[series_vpf+'Vz'][str(seismometr_vpf)])[0], fs, mode='plotly'), key="plot_imenrg"+str(seismometr_vpf))
        im_power = ssp.vpf(np.array(VrVz_dict[series_vpf+'Vr'][str(seismometr_vpf)])[0], np.array(VrVz_dict[series_vpf+'Vz'][str(seismometr_vpf)])[0], fs, mode='matrix') 
        im_power_df = pd.DataFrame({'im_power':im_power})
        # st.session_state.dfs[series+"_vpf"] = im_power_df
        
        ####### ------------- –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–ø–µ–∫—Ç—Ä—É —Ç–∞ PSD –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—ñ–∫–Ω–∞ –∑ —Å–∏–≥–Ω–∞–ª–æ–º

        
        # –ü–æ–ª—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó —Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —á–∞—Å—Ç–æ—Ç–∏
        col1, col2 = st.columns(2)
        with col1:
            vpf_min_time_s = st.number_input("üîª –ü–æ—á–∞—Ç–æ–∫ —Å–∏–≥–Ω–∞–ª—É", min_value=0.0, value=1.0, step=0.1, format="%.4f", key='min_time_sig1')
        with col2:
            vpf_max_time_s = st.number_input("üî∫ –ö—ñ–Ω–µ—Ü—å —Å–∏–≥–Ω–∞–ª—É", min_value=0.0, value=10.0, step=0.1, format="%.4f", key='max_time_sig1')
            
        vpf_cut = ssp.cut_dataframe_time_window(im_power_df, fs, vpf_min_time_s, vpf_max_time_s)
            
        st.subheader("–°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–∞")
        st.pyplot(ssp.spectr_plot(vpf_cut, fs, n_cols=1, columns=['im_power']), use_container_width=True)
        st.subheader("–ì—Ä–∞—Ñ—ñ–∫ PSD")
        db_scale_vpf = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –≤ —à–∫–∞–ª—ñ –¥–µ—Ü–∏–±–µ–ª, –¥–ë", value=False, key='db_scale_vpf')
        if db_scale_vpf:
            st.plotly_chart(ssp.psd_plot_df(vpf_cut, fs=fs, n_cols=1, columns=['im_power'], mode='plotly', scale='db'), use_container_width=True,key="plot_vpf_psd1")
            f_vpf, Pxx_vpf = ssp.psd_plot_df(vpf_cut, fs=fs, n_cols=1, columns=['im_power'], mode='matrix', scale='db') 
        else:
            st.plotly_chart(ssp.psd_plot_df(vpf_cut, fs=fs, n_cols=1, columns=['im_power'], mode='plotly', scale='energy'), use_container_width=True,key="plot_vpf_psd2")
            f_vpf, Pxx_vpf = ssp.psd_plot_df(vpf_cut, fs=fs, n_cols=1, columns=['im_power'], mode='matrix', scale='energy')     

        st.subheader("üéöÔ∏è –°–µ—Ä–µ–¥–Ω—î –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è PSD –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ")
    
        col1, col2 = st.columns(2)
        with col1:
            min_freq_psd = st.number_input("üîª –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞", min_value=0.0, value=20.0, step=1.0,  key='min_freq_psd')
            
        with col2:
            max_freq_psd = st.number_input("üî∫ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞", min_value=0.0, value=50.0, step=1.0, key='max_freq_psd')
            
            
        
        print(f[0])
        print(Pxx[0])
        rms_psd, range_freq_val = ssp.rms_in_band(f_vpf[0], Pxx_vpf[0], min_freq_psd, max_freq_psd)
        st.subheader(f"üéöÔ∏è RMS PSD –¥–æ—Ä—ñ–≤–Ω—é—î {rms_psd} –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ –≤—ñ–¥ {range_freq_val[0]} –ì—Ü –¥–æ {range_freq_val[1]} –ì—Ü")







        st.subheader("üéöÔ∏è –ß–∞—Å–æ–≤—ñ –≤—ñ–∫–Ω–∞ —Å–∏–≥–Ω–∞–ª—É —Ç–∞ —à—É–º—É")
        
        with st.form("vpf_window_form2", clear_on_submit=False):
            # –ü–æ–ª—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó —Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —á–∞—Å—Ç–æ—Ç–∏
            col1, col2 = st.columns(2)
            with col1:
                vpf_min_time_s = st.number_input("üîª –ü–æ—á–∞—Ç–æ–∫ —Å–∏–≥–Ω–∞–ª—É", min_value=0.0, value=1.0, step=0.1, format="%.4f", key='min_time_sig2')
            with col2:
                vpf_max_time_s = st.number_input("üî∫ –ö—ñ–Ω–µ—Ü—å —Å–∏–≥–Ω–∞–ª—É", min_value=0.0, value=10.0, step=0.1, format="%.4f", key='max_time_sig2')
            col1, col2 = st.columns(2)
            with col1:
                vpf_min_time_n = st.number_input("üîª –ü–æ—á–∞—Ç–æ–∫ —à—É–º—É", min_value=0.0, value=1.0, step=0.1, format="%.4f", key='min_time_noise2')
            with col2:
                vpf_max_time_n = st.number_input("üî∫ –ö—ñ–Ω–µ—Ü—å —à—É–º—É", min_value=0.0, value=10.0, step=0.1, format="%.4f", key='max_time_noise2')
            
            submitted = st.form_submit_button("‚öôÔ∏è –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –≤—ñ–∫–Ω–æ")
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        if submitted:
            signal = ssp.cut_dataframe_time_window(im_power_df, fs, vpf_min_time_s, vpf_max_time_s)
            noise = ssp.cut_dataframe_time_window(im_power_df, fs, vpf_min_time_n, vpf_max_time_n)
            
            signal_db = 10*np.log10((np.mean(signal**2))**(1/2)+10**(-12))
            noise_db = 10*np.log10((np.mean(noise**2))**(1/2)+10**(-12))
            
            # snr = (np.mean(signal**2))**(1/2)/(np.mean(noise**2))**(1/2)
            snr = ssp.compute_snr_df(signal, noise)
            
            
            st.subheader("RMS —Å–∏–≥–Ω–∞–ª—É = " + str(signal_db) + " –¥–ë")
            st.subheader("RMS —à—É–º—É = " + str(noise_db ) + " –¥–ë")
            st.subheader("–í—ñ–¥–Ω–æ—à–µ–Ω–Ω—è SNR")
            st.dataframe(snr)
            st.subheader("–ì—Ä–∞—Ñ—ñ–∫ –ì–∞–Ω–∫–µ–ª—è –≤–∏–¥—ñ–ª–µ–Ω–Ω–æ–≥–æ –≤—ñ–∫–Ω–æ–º —Å–∏–≥–Ω–∞–ª—É")
            st.plotly_chart(ssp.plot_hankel(np.array(VrVz_dict[series_vpf+'Vr'][str(seismometr_vpf)])[0], 
                                            np.array(VrVz_dict[series_vpf+'Vz'][str(seismometr_vpf)])[0], 
                                            scale=1.0, mode = 'plotly', 
                                            start_time=vpf_min_time_s, end_time=vpf_max_time_s),
                            use_container_width=True, key="plot_hackl_w"+str(seismometr_vpf))
            

# === –í–∫–ª–∞–¥–∫–∞ 12: –ê–∑–∏–º—É—Ç–∞–ª—å–Ω–∞ –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω—ñ—Å—Ç—å ===


with tab12:
    st.subheader("–û–±—á–∏—Å–ª–µ–Ω–Ω—è –∞–∑–∏–º—É—Ç–∞–ª—å–Ω–æ—ó –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—ñ")
    st.subheader("–ó–∞–¥–∞–π—Ç–µ —Å—Ö–µ–º—É —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É")

    corr_arcs = {}
    sel_sig1_list = []
    sel_sig2_list = []
    sel_geo1_list = []
    sel_geo2_list = []

    sel_arc_list = []
    sel_angl_list = []

    if len(st.session_state.dfs)>0:

        n_arc = int(st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥—É–≥ –∑ —Å–µ–π—Å–º–æ–º–µ—Ç—Ä–∞–º–∏", min_value=0, value=3, step=1, key='arc_numb'))
        seism_list_txt = st.text_area("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ–π—Å–º–æ–º–µ—Ç—Ä—ñ–≤ –Ω–∞ –∫–æ–∂–Ω—ñ–π –¥—É–∑—ñ (—á–µ—Ä–µ–∑ –∫–æ–º—É):", "7, 9, 11")
        seism_list = None
        if seism_list_txt:
            try:
                seism_list = [float(x.strip()) for x in seism_list_txt.split(',')]
                st.write("–°–ø–∏—Å–æ–∫:", seism_list)
            except ValueError:
                st.error("–ù–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –¥–µ—è–∫—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–∞ —á–∏—Å–ª–∞.")

        if n_arc and seism_list:
        
            # with st.form("azmt_window_form", clear_on_submit=False): 
            col1, col2, col3 = st.columns(3)
            for i in range(1, int(sum(seism_list))-n_arc+1):
                with col1:
                    sel_ser1 = st.selectbox(f"–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—à—É —Å–µ—Ä—ñ—é –ø–∞—Ä–∏ ‚Ññ{i} –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", 
                                                      list(st.session_state.dfs.keys())+list(st.session_state.dfs_vpf.keys())+list(st.session_state.dfs_sum.keys())+list(st.session_state.dfs_sub.keys()),
                                                      key="azmt_sel_ser1"+str(i))
                    sel_geoph1 = st.multiselect("–û–±–µ—Ä—ñ—Ç—å –≥–µ–æ—Ñ–æ–Ω–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", 
                                                        st.session_state.geoph_list+st.session_state.im_geoph_list+['X', 'Z', 'Y1', 'Y2'],
                                                        default=st.session_state.def_geoph_list,
                                                        key="azmt_sel_geo1"+str(i))
                with col2:
                    sel_ser2 = st.selectbox(f"–û–±–µ—Ä—ñ—Ç—å –¥—Ä—É–≥—É —Å–µ—Ä—ñ—é –ø–∞—Ä–∏ ‚Ññ{i} –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", 
                                                      list(st.session_state.dfs.keys())+list(st.session_state.dfs_vpf.keys())+list(st.session_state.dfs_sum.keys())+list(st.session_state.dfs_sub.keys()),
                                                      key="azmt_sel_ser2"+str(i))
                    sel_geoph2 = st.multiselect("–û–±–µ—Ä—ñ—Ç—å –≥–µ–æ—Ñ–æ–Ω–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", 
                                                        st.session_state.geoph_list+st.session_state.im_geoph_list+['X', 'Z', 'Y1', 'Y2'],
                                                        default=st.session_state.def_geoph_list,
                                                        key="azmt_sel_geo2"+str(i))
                with col3:
                    sel_angl = float(st.number_input("–ö—É—Ç –¥—Ä—É–≥–æ–≥–æ –≤ –ø–∞—Ä—ñ —Å–µ–π—Å–º–æ–º–µ—Ç—Ä–∞", min_value=0, value=30, step=1, key='arc_angl'+str(i)))
                    sel_arc = int(st.selectbox("–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –¥—É–≥–∏:", list(range(1, n_arc + 1)), key="arc_numb"+str(i)))
                    
                
                sel_geo1_list.append(sel_geoph1)
                sel_geo2_list.append(sel_geoph2)
                sel_sig1_list.append(sel_ser1)
                sel_sig2_list.append(sel_ser2)
                sel_arc_list.append(sel_arc)
                sel_angl_list.append(sel_angl)
                
            st.write(sel_sig1_list)
            st.write(sel_sig2_list)
            st.write(sel_geo1_list)
            st.write(sel_geo2_list)
            st.write(sel_arc_list)
            st.write(sel_angl_list)
            
            if st.button("‚öôÔ∏è –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Å—Ö–µ–º—É —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É"):
                st.success("–ó–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è —Å—Ö–µ–º–∞")
                
                # corr_list = []
                
                    
                # for sig1, sig2, geo1, geo2, arc, angl in zip(sel_sig1_list, sel_sig2_list, sel_geo1_list, sel_geo2_list, sel_arc_list, sel_angl_list):
                    
                #     df1 = st.session_state.dfs[sig1][geo1]
                #     df2 = st.session_state.dfs[sig2][geo2]
                    
                #     st.write(df1)
                #     st.write(df2)
                
                #     corr_list.append(np.corrcoef(df1, df2))
                    
                # st.write(corr_list)
                
                
                        
                #     df = df.add_suffix("_"+df_name)
                #     df = ssp.cut_dataframe_time_window(df, fs=fs, start_time=min_time_list[i], end_time=max_time_list[i])

                #     df_plot_list.append(df)
                # df_plot_list = ssp.align_dataframe_lengths(df_plot_list)
                # df_plot = pd.concat(df_plot_list, axis=1)
                
                # print(df_plot)
                # print(min_time_list)
                # print(max_time_list)
                
                # st.plotly_chart(ssp.plot_time_signals(df_plot, 
                #                                       fs, 
                #                                       n_cols=1, 
                #                                       threshold=0.5, columns=list(df_plot.columns), 
                #                                       mode="plotly_one"), 
                #                 use_container_width=True, key='plots_multy')
                
                # st.subheader("–ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Å–∏–≥–Ω–∞–ª–∞–º–∏")
                
                # delay_matrix = ssp.compute_delay_matrix(df_plot, fs, method='gcc_phat')
                # st.dataframe(delay_matrix)



# === –í–∫–ª–∞–¥–∫–∞ 13: –ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∞ –º–æ–¥–µ–ª—å —Å–æ–Ω–∞—Ä–∞ ===
with tab13:
    st.subheader("–ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∞ –º–æ–¥–µ–ª—å –∑–∞—Ç—É—Ö–∞–Ω–Ω—è")
    st.subheader("–í–∏–∫–æ–Ω–∞–π—Ç–µ –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–µ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è. –ü–æ–±—É–¥—É–π—Ç–µ –¥—ñ–∞–≥—Ä–∞–º—É VPF")

    if len(st.session_state.dfs_vpf)>0:
        
        with st.form("model_window_form", clear_on_submit=False):

            st.write("–ü–µ—Ä—à–∞ —á–∞—Å—Ç–∏–Ω–∞ —Å–µ—Ä—ñ—ó. –û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –∑ —Å—É—Ñ—Ñ—ñ–∫—Å–æ–º _vpf")
            selected_ser1_mat = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é ‚Ññ1 –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", list(st.session_state.dfs_vpf.keys()), key="mat_ser1")        
            st.write("–î—Ä—É–≥–∞ —á–∞—Å—Ç–∏–Ω–∞ —Å–µ—Ä—ñ—ó. –û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –∑ —Å—É—Ñ—Ñ—ñ–∫—Å–æ–º _vpf")
            selected_ser2_mat = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", list(st.session_state.dfs_vpf.keys()), key="mat_ser2")        
            st.write("–í–∫–∞–∂—ñ—Ç—å –≤—ñ–¥—Å—Ç–∞–Ω—ñ –¥–æ —Å–µ–π—Å–º–æ–º–µ—Ç—Ä—ñ–≤ —Å–µ—Ä—ñ–π")
            seismometr1 = float(st.number_input("–í–∫–∞–∂—ñ—Ç—å –≤—ñ–¥—Å—Ç–∞–Ω—å ‚Ññ1", min_value=1.0, max_value=20.0, value=3.0, step=1.0, key="mat_seism1"))
            seismometr2 = float(st.number_input("–í–∫–∞–∂—ñ—Ç—å –≤—ñ–¥—Å—Ç–∞–Ω—å ‚Ññ2", min_value=1.0, max_value=20.0, value=5.0, step=1.0, key="mat_seism2"))
            seismometr3 = float(st.number_input("–í–∫–∞–∂—ñ—Ç—å –≤—ñ–¥—Å—Ç–∞–Ω—å ‚Ññ3", min_value=1.0, max_value=20.0, value=7.5, step=1.0, key="mat_seism3"))
            seismometr4 = float(st.number_input("–í–∫–∞–∂—ñ—Ç—å –≤—ñ–¥—Å—Ç–∞–Ω—å ‚Ññ4", min_value=1.0, max_value=20.0, value=10.0, step=1.0, key="mat_seism4"))
            seismometr5 = float(st.number_input("–í–∫–∞–∂—ñ—Ç—å –≤—ñ–¥—Å—Ç–∞–Ω—å ‚Ññ5", min_value=1.0, max_value=20.0, value=12.5, step=1.0, key="mat_seism5"))
            seismometr6 = float(st.number_input("–í–∫–∞–∂—ñ—Ç—å –≤—ñ–¥—Å—Ç–∞–Ω—å ‚Ññ6", min_value=1.0, max_value=20.0, value=15.0, step=1.0, key="mat_seism6"))
            
            db_scale_model = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –≤ —à–∫–∞–ª—ñ –¥–µ—Ü–∏–±–µ–ª, –¥–ë", value=False, key='db_scale_model')
            
            submitted = st.form_submit_button("‚öôÔ∏è –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏")
            
        if submitted:
            
            
            
            min_freq_list = [30, 50, 70, 90, 110, 130, 150, 170, 190, 210, 230, 250, 270]
            max_freq_list = [50, 70, 90, 110, 130, 150, 170, 190, 210, 230, 250, 270, 290]
            
            index_labels = [f"{min_}-{max_}" for min_, max_ in zip(min_freq_list, max_freq_list)]

            # st.session_state.dfs[selected_ser1] - –≤–∏–±—Ä–∞–Ω–∞ —Å–µ—Ä—ñ—è, —â–æ –º—ñ—Å—Ç–∏—Ç—å 3 –∫–æ–ª–æ–Ω–∫–∏ –∑–Ω–∞—á–µ–Ω—å –ø—ñ—Å–ª—è VPF
            
            df_vpf_dict = {}
            
            
            seismometr_list = [seismometr1, seismometr2, seismometr3,
                               seismometr4, seismometr5, seismometr6]
            i = 0
            for col in ['im_power1', 'im_power2', 'im_power3']:
                seism_freq_vals1 = []
                seism_freq_vals2 = []
                for min_freq, max_freq in zip(min_freq_list, max_freq_list):
                    
                    f1, Pxx1 = ssp.psd_plot_df(st.session_state.dfs_vpf[selected_ser1_mat], fs=fs, n_cols=1, columns=[col], mode='matrix', scale='energy')                
                    rms1, range_freq_val1 = ssp.rms_in_band(f1[0], Pxx1[0], min_freq, max_freq)        
                    seism_freq_vals1.append(float(rms1))
                    
                    f2, Pxx2 = ssp.psd_plot_df(st.session_state.dfs_vpf[selected_ser2_mat], fs=fs, n_cols=1, columns=[col], mode='matrix', scale='energy')                
                    rms2, range_freq_val2 = ssp.rms_in_band(f2[0], Pxx2[0], min_freq, max_freq)        
                    seism_freq_vals2.append(float(rms2))
                    
                    print(st.session_state.dfs_vpf[selected_ser1_mat])
                    print(st.session_state.dfs_vpf[selected_ser2_mat])
                    
                print(seism_freq_vals1)
                print(seism_freq_vals2)
                    
                df_vpf_dict[seismometr_list[i]] = seism_freq_vals1         
                df_vpf_dict[seismometr_list[i+3]] = seism_freq_vals2         
                i = i + 1
            
            
            df_vpf = pd.DataFrame({k: df_vpf_dict[k] for k in sorted(df_vpf_dict)})
            df_vpf.index = index_labels
            
            print(df_vpf_dict)
            print(df_vpf)
            
            
            
            st.subheader("RMS –≤—ñ–¥ PSD —Å–∏–≥–Ω–∞–ª—É –Ω–∞ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏—Ö –≤—ñ–¥—Å—Ç–∞–Ω—è—Ö –ø—ñ—Å–ª—è VPF –Ω–∞ —Ñ—ñ–∫—Å–æ–≤–∞–Ω—ñ–π —á–∞—Å—Ç–æ—Ç—ñ")
            if db_scale_model:
                st.dataframe(ssp.to_decibels(df_vpf), height=495)
            else:
                st.dataframe(df_vpf.style.format("{:.4e}"), height=495)
            
            st.subheader("–ü–∏—Ç–æ–º—ñ –≤—Ç—Ä–∞—Ç–∏ –Ω–∞ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏—Ö –≤—ñ–¥—Å—Ç–∞–Ω—è—Ö –ø—ñ—Å–ª—è VPF –Ω–∞ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ—ó —á–∞—Å—Ç–æ—Ç—ñ")
            
            selected_col = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥—Å—Ç–∞–Ω—å —è–∫ –±–∞–∑–æ–≤—É –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞—Ç—É—Ö–∞–Ω–Ω—è (–∑–∞–∑–≤–∏—á–∞–π –Ω–∞–π–º–µ–Ω—à–∞)", list(df_vpf.columns), key="mat_sel_col")        
            
            # –í—ñ–¥–Ω—è—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—è –≤—ñ–¥ —É—Å—ñ—Ö —ñ–Ω—à–∏—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤ (–ø–æ–∫—Ä–æ–∫–æ–≤–æ)
            # df_vpf_sub = df_vpf.drop(columns=selected_col).subtract(df_vpf[selected_col], axis=0)
            
            df_vpf_sub = df_vpf.drop(columns=selected_col).divide(df_vpf[selected_col], axis=0)
            
            if db_scale_model:
                st.dataframe(ssp.to_decibels(df_vpf_sub), height=495)
            else:
                st.dataframe(df_vpf_sub.style.format("{:.4e}"), height=495)
            
            st.subheader("–¢–µ–æ—Ä–µ—Ç–∏—á–Ω—ñ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –∑–∞—Ç—É—Ö–∞–Ω–Ω—è –∞–º–ø–ª—ñ—Ç—É–¥ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –≤—ñ–¥—Å—Ç–∞–Ω—ñ. –í—Ç—Ä–∞—Ç–∏ –Ω–∞ —Ä–æ–∑–ø–æ–≤—Å—é–¥–∂–µ–Ω–Ω—è")
            
            seismometr_dist = [x - seismometr_list[0] for x in seismometr_list]
            
            df_wave_diminish_cols = [x for x in seismometr_dist if x>0]
            
            wave_diminish = [1/x for x in df_wave_diminish_cols]
            
            print(seismometr_dist)
            print(df_wave_diminish_cols)
            print(wave_diminish)
            
            df_wave_diminish = pd.DataFrame(wave_diminish)
            df_wave_diminish = df_wave_diminish.T
            df_wave_diminish.columns = df_wave_diminish_cols
            
            
            if db_scale_model:
                st.dataframe(ssp.to_decibels(df_wave_diminish))
            else:
                st.dataframe(df_wave_diminish)
            
            st.subheader("–ï–º–ø—ñ—Ä–∏—á–Ω—ñ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –∑–∞—Ç—É—Ö–∞–Ω–Ω—è –∞–º–ø–ª—ñ—Ç—É–¥ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –≤—ñ–¥—Å—Ç–∞–Ω—ñ. –í—Ç—Ä–∞—Ç–∏ –Ω–∞ —Ä–æ–∑–ø–æ–≤—Å—é–¥–∂–µ–Ω–Ω—è")
            
            df_wave_diminish_emp = pd.DataFrame(df_vpf_sub.mean())
            df_wave_diminish_emp = df_wave_diminish_emp.T
            df_wave_diminish_emp.columns = df_wave_diminish_cols
            
            
            if db_scale_model:
                st.dataframe(ssp.to_decibels(df_wave_diminish_emp))
            else:
                st.dataframe(df_wave_diminish_emp)


            
            
            
            
