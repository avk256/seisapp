import git
from git import Repo
from git.exc import GitCommandError

repo_url = "https://github.com/avk256/seisproc.git"
clone_path = "./seisproc"

try:
    Repo.clone_from(repo_url, clone_path)
    print("–†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π —É—Å–ø—ñ—à–Ω–æ –∫–ª–æ–Ω–æ–≤–∞–Ω–æ!")
except GitCommandError as e:
    print("‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é:")

import seisproc.seisproc as ssp

import streamlit as st
import pandas as pd
import numpy as np

import statsmodels

@st.cache_data
def load_file(file_name):
    # st.write("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...")  # –¶–µ –±—É–¥–µ –≤–∏–¥–Ω–æ –ª–∏—à–µ 1 —Ä–∞–∑
    df = pd.read_csv(file_name, header=None, sep=';')
    df.columns = ['X1','Y11','Y12','Z1','X2','Y21','Y22','Z2','X3','Y31','Y32','Z3']
    return df

st.set_page_config(page_title="SeisApp", layout="wide")
st.title("–ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö —Å–µ–π—Å–º–æ–º–µ—Ç—Ä—ñ–≤")


# === –ì–ª–æ–±–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, —è–∫—ñ –≤–ø–ª–∏–≤–∞—é—Ç—å –Ω–∞ —ñ–Ω—à—ñ –≤–∫–ª–∞–¥–∫–∏ ===
with st.sidebar:
    st.header("‚öôÔ∏è –ó–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
    
    st.title("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Ä—ñ–π –¥–∞–Ω–∏—Ö")
    
    # 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Ö CSV —Ñ–∞–π–ª—ñ–≤
    uploaded_files = st.file_uploader(
        "–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∞–±–æ –∫—ñ–ª—å–∫–∞ CSV-—Ñ–∞–π–ª—ñ–≤, —è–∫—ñ –º—ñ—Å—Ç—è—Ç—å –¥–∞–Ω—ñ —Å–µ—Ä—ñ–π",
        type="csv",
        accept_multiple_files=True
    )
    
    
    # –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —É —Å–ª–æ–≤–Ω–∏–∫ DataFrame'—ñ–≤
    dfs = {}  # –∫–ª—é—á: —ñ–º'—è —Ñ–∞–π–ª—É, –∑–Ω–∞—á–µ–Ω–Ω—è: DataFrame
    
    if uploaded_files:
        for file in uploaded_files:
            dfs[file.name] = load_file(file)

    if len(dfs)>0:
        
        
        fs = st.number_input("üîª –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü—ñ—ó", min_value=800.0, value=800.0, step=10.0)
        min_freq = 0
        min_freq = 0

        # ================ –°–º—É–≥–æ–≤–∏–π —Ñ—ñ–ª—å—Ç—Ä =====================================
        
        st.subheader("üéöÔ∏è –°–º—É–≥–æ–≤–∏–π —Ñ—ñ–ª—å—Ç—Ä")
        # –ü–æ–ª—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó —Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —á–∞—Å—Ç–æ—Ç–∏
        col1, col2 = st.columns(2)
        with col1:
            min_freq = st.number_input("üîª min —á–∞—Å—Ç–æ—Ç–∞", min_value=0.0, value=20.0, step=10.0)
        with col2:
            max_freq = st.number_input("üî∫ max —á–∞—Å—Ç–æ—Ç–∞", min_value=0.0, value=50.0, step=10.0)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        if st.button("‚öôÔ∏è –§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏"):
            st.success(f"–ó–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è —Ñ—ñ–ª—å—Ç—Ä: –≤—ñ–¥ {min_freq} –¥–æ {max_freq} –ì—Ü")
            # –¢—É—Ç –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
            for key, data in zip(dfs.keys(), dfs.values()):
                dfs[key] = ssp.filter_dataframe(data, min_freq, max_freq, fs)

        # ================== –ß–∞—Å–æ–≤–µ –≤—ñ–∫–Ω–æ =====================================
        
        st.subheader("üéöÔ∏è –ß–∞—Å–æ–≤–µ –≤—ñ–∫–Ω–æ")
        # –ü–æ–ª—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó —Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —á–∞—Å—Ç–æ—Ç–∏
        col1, col2 = st.columns(2)
        with col1:
            min_time = st.number_input("üîª min —á–∞—Å", min_value=0.0, value=1.0, step=1.0)
        with col2:
            max_time = st.number_input("üî∫ max —á–∞—Å", min_value=0.0, value=10.0, step=1.0)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        if st.button("‚öôÔ∏è –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –≤—ñ–∫–Ω–æ"):
            st.success(f"–ó–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è —á–∞—Å–æ–≤–µ –≤—ñ–∫–Ω–æ: –≤—ñ–¥ {min_time} –¥–æ {max_time} —Å")
            # –¢—É—Ç –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
            for key, data in zip(dfs.keys(), dfs.values()):
                dfs[key] = ssp.cut_dataframe_time_window(data, fs, min_time, max_time)

        # ===================== –î–µ—Ç—Ä–µ–Ω–¥ =======================================
   
        st.subheader("üéöÔ∏è –û–ø–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —Ç—Ä–µ–Ω–¥—É")
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É –¥–µ—Ç—Ä–µ–Ω–¥—É
        if st.button("‚öôÔ∏è –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –¥–µ—Ç—Ä–µ–Ω–¥"):
            st.success("–ó–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–µ—Ç—Ä–µ–Ω–¥")
            # –¢—É—Ç –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
            for key, data in zip(dfs.keys(), dfs.values()):
                dfs[key] = ssp.detrend_dataframe(data)
        
    
    
dfs = dfs

# === –í–∫–ª–∞–¥–∫–∏ ===
tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8, tab9 = st.tabs(["üìà –î–∞–Ω—ñ", "üìä –ì—Ä–∞—Ñ—ñ–∫–∏", "–°–ø–µ–∫—Ç—Ä", "PSD", "–ö—Ä–æ—Å-–∫–æ—Ä–µ–ª—è—Ü—ñ—è", "–ö–æ–≥–µ—Ä–µ–Ω—Ç–Ω—ñ—Å—Ç—å", "–ö–æ–≥–µ—Ä–µ–Ω—Ç–Ω–µ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è", "–£—è–≤–Ω–∞ –µ–Ω–µ—Ä–≥—ñ—è", "–ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω–µ –º–æ–¥–µ–ª—å —Å–æ–Ω–∞—Ä–∞"])

# === –í–∫–ª–∞–¥–∫–∞ 1: –î–∞–Ω—ñ ===
with tab1:
    
        # 3. –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        st.success(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(dfs)} —Ñ–∞–π–ª—ñ–≤")
        
        for filename, df in dfs.items():
            st.subheader(f"üìÑ –§–∞–π–ª: {filename}")
            st.write(df.head())
    
            # –î–æ–¥–∞—Ç–∫–æ–≤–æ: —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
            st.text(f"–§–æ—Ä–º–∞: {df.shape[0]} —Ä—è–¥–∫—ñ–≤ √ó {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
            st.write(df.describe())
            
    


# === –í–∫–ª–∞–¥–∫–∞ 2: –ì—Ä–∞—Ñ—ñ–∫–∏ ===
with tab2:
    
    
    st.subheader("–ì—Ä–∞—Ñ—ñ–∫–∏ —É –¥–æ–º–µ–Ω—ñ –∞–º–ø–ª—ñ—Ç—É–¥–∞-—á–∞—Å")
    n_cols = int(st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è", min_value=0.0, value=3.0, step=1.0))
    selected = st.multiselect("–û–±–µ—Ä—ñ—Ç—å –≥–µ–æ—Ñ–æ–Ω–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", ['X1','Y11','Y12','Z1','X2','Y21','Y22','Z2','X3','Y31','Y32','Z3'], default=['X1', 'X2', 'X3', 'Z1', 'Z2', 'Z3'])
    one_plot = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –≥–µ–æ—Ñ–æ–Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º—É –≥—Ä–∞—Ñ—ñ–∫—É", value=True)
    
    
    if len(dfs)>0:
        for filename, data in dfs.items():
            st.subheader(filename)
            # st.write(filename)
            # st.caption(filename)
            
            if all(elem in list(data.columns) for elem in selected):
            
                if one_plot:
                    st.plotly_chart(ssp.plot_time_signals(data, fs, n_cols=n_cols, threshold=0.5, columns=selected, mode="plotly_one"), use_container_width=True)
                else:
                    st.plotly_chart(ssp.plot_time_signals(data, fs, n_cols=n_cols, threshold=0.5, columns=selected, mode="plotly"), use_container_width=True)
    

# === –í–∫–ª–∞–¥–∫–∞ 3: –°–ø–µ–∫—Ç—Ä ===
with tab3:
    st.subheader("–°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–∏. –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —É –¥–æ–º–µ–Ω—ñ —á–∞—Å—Ç–æ—Ç–∞-—á–∞—Å")
    
    if len(dfs)>0:
        for filename, data in dfs.items():
            st.subheader(filename)
            
            if all(elem in list(data.columns) for elem in selected):
                st.pyplot(ssp.spectr_plot(data, fs, n_cols=n_cols, columns=selected), use_container_width=True)
    
# === –í–∫–ª–∞–¥–∫–∞ 4: PSD ===
with tab4:
    st.subheader("–°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–∞ —â—ñ–ª—å–Ω—ñ—Å—Ç—å –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ (PSD)")
    
    if len(dfs)>0:
        for filename, data in dfs.items():
            st.subheader(filename)
            if all(elem in list(data.columns) for elem in selected):
                st.plotly_chart(ssp.psd_plot_df(data, fs=fs, n_cols=n_cols, columns=selected, mode='plotly'), use_container_width=True)

# === –í–∫–ª–∞–¥–∫–∞ 5: –ö—Ä–æ—Å-–∫–æ—Ä–µ–ª—è—Ü—ñ—è ===
with tab5:
    st.subheader("–ó–∞—Ç—Ä–∏–º–∫–∏ –≤ —Å–∏–≥–Ω–∞–ª–∞—Ö –≥–µ–æ—Ñ–æ–Ω—ñ–≤, –æ–±—á–∏—Å–ª–µ–Ω—ñ –∑–∞ –º–µ—Ç–æ–¥–æ–º –∫—Ä–æ—Å-–∫–æ—Ä–µ–ª—è—Ü—ñ—ó")
    n_min = st.number_input("–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É", min_value=-100.0, value=-0.07, step=0.01)
    n_max = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É", min_value=-100.0, value=-0.01, step=0.01)
    p_min = st.number_input("–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É", min_value=0.0, value=0.01, step=0.01)
    p_max = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É", min_value=0.0, value=0.07, step=0.01)
    selected = st.multiselect("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø–∏ –≥–µ–æ—Ñ–æ–Ω—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", ['X', 'Y', 'Z'], default=['X', 'Z'])
    # delays_dict = {key: None for key in selected}
    
    if len(dfs)>0:
        for filename, data in dfs.items():
            st.subheader(filename)
            
            # if all(elem in list(data.columns) for elem in selected):
            X, Y, Z = ssp.cross_corr_crossval_from_df(data, fs, verbose=False, allowed_lag_ranges_s=[(n_min, n_max),(p_min, p_max)])
            delays_dict = {name: globals()[name] for name in selected}
            st.pyplot(ssp.plot_multiple_delay_matrices(delays_dict))
            
# === –í–∫–ª–∞–¥–∫–∞ 6: –ö–æ–≥–µ—Ä–µ–Ω—Ç–Ω—ñ—Å—Ç—å ===
with tab6:
    st.subheader("–ö–æ–≥–µ—Ä–µ–Ω—Ç–Ω—ñ—Å—Ç—å –º—ñ–∂ –¥–≤–æ–º–∞ —Å–∏–≥–Ω–∞–ª–∞–º–∏")

    if len(dfs)>0:

        st.write("1–π —Å–∏–≥–Ω–∞–ª")
        selected_ser1 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", list(dfs.keys()),key="select1")
        selected_seism1 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø–∏ –≥–µ–æ—Ñ–æ–Ω—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", ['X1','Y11','Y12','Z1','X2','Y21','Y22','Z2','X3','Y31','Y32','Z3'],key="select2")
        st.write("2–π —Å–∏–≥–Ω–∞–ª")
        selected_ser2 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", list(dfs.keys()),key="select3")
        selected_seism2 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø–∏ –≥–µ–æ—Ñ–æ–Ω—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", ['X1','Y11','Y12','Z1','X2','Y21','Y22','Z2','X3','Y31','Y32','Z3'],key="select4")
        st.plotly_chart(ssp.plot_coherence(dfs[selected_ser1][selected_seism1], dfs[selected_ser2][selected_seism2], fs, f"{selected_ser1}, {selected_seism1}", f"{selected_ser2}, {selected_seism2}", mode='plotly'), use_container_width=True)
        
        

# === –í–∫–ª–∞–¥–∫–∞ 7: –ö–æ–≥–µ—Ä–µ–Ω—Ç–Ω–µ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è ===
with tab7:
    
    st.session_state.dfs = dfs
    
    st.subheader("–ö–æ–≥–µ—Ä–µ–Ω—Ç–Ω–µ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —à—É–º—É")
    # st.write(st.session_state.dfs.keys())
    if len(dfs)>0:

        st.write("1–π —Å–∏–≥–Ω–∞–ª")
        selected_ser1 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", list(dfs.keys()),key="select11")
        # selected_seism1 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø–∏ –≥–µ–æ—Ñ–æ–Ω—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", ['X1','Y11','Y12','Z1','X2','Y21','Y22','Z2','X3','Y31','Y32','Z3'],key="select12")
        st.write("2–π —Å–∏–≥–Ω–∞–ª (—à—É–º)")
        selected_ser2 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", list(dfs.keys()),key="select13")        
        st.write("–ì–µ–æ—Ñ–æ–Ω–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É")
        selected_geoph = st.multiselect("–û–±–µ—Ä—ñ—Ç—å –≥–µ–æ—Ñ–æ–Ω–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", ['X1','Y11','Y12','Z1','X2','Y21','Y22','Z2','X3','Y31','Y32','Z3'], default=['X1', 'X2', 'X3', 'Z1', 'Z2', 'Z3'],key="select14")
        
        data_geoph = {}
        for geoph in ['X1','Y11','Y12','Z1','X2','Y21','Y22','Z2','X3','Y31','Y32','Z3']: 
            signal, _, _, _ = ssp.coherent_subtraction_aligned_with_mask(dfs[selected_ser1][geoph], dfs[selected_ser2][geoph], nperseg=2048, noverlap=1792,coherence_threshold=0.7)
            signal = signal[:len(dfs[selected_ser1][geoph])]
            data_geoph[geoph] = signal
            
       


        df = pd.DataFrame(data_geoph)
        st.session_state.dfs[selected_ser1+"_subtract"] = df
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ–≥–æ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è")
        if len(df):
            # dfs[selected_ser1+"_subtract"] = df 
            st.subheader("–ì—Ä–∞—Ñ—ñ–∫ –∞–º–ø–ª—ñ—Ç—É–¥–∞-—á–∞—Å")
            st.plotly_chart(ssp.plot_time_signals(df, fs, n_cols=n_cols, columns=selected_geoph, threshold=0.5), use_container_width=True)
            st.subheader("–°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–∞")
            st.pyplot(ssp.spectr_plot(df, fs, n_cols=n_cols, columns=selected_geoph), use_container_width=True)
            st.subheader("–ì—Ä–∞—Ñ—ñ–∫ PSD")
            st.plotly_chart(ssp.psd_plot_df(df, fs=fs, n_cols=n_cols, columns=selected_geoph, mode='plotly'), use_container_width=True)
            
        # st.write(st.session_state.dfs.keys())
        # st.plotly_chart(ssp.plot_coherence(dfs[selected_ser1][selected_seism1], dfs[selected_ser2][selected_seism2], fs, f"{selected_ser1}, {selected_seism1}", f"{selected_ser2}, {selected_seism2}", mode='plotly'), use_container_width=True)


# === –í–∫–ª–∞–¥–∫–∞ 8: –£—è–≤–Ω–∞ –µ–Ω–µ—Ä–≥—ñ—è ===
with tab8:
    st.subheader("–û–±—á–∏—Å–ª–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ø–æ–ª—è—Ä–∏–∑–∞—Ü—ñ–π–Ω–æ—ó —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó")

    
    
    if len(dfs)>0:

        angl1 = st.number_input("–ù–∞–ø—Ä—è–º –Ω–∞ –¥–∂–µ—Ä–µ–ª–æ —Å–µ–π—Å–º–æ–º–µ—Ç—Ä–∞ 1, –≥—Ä–∞–¥—É—Å–∏", min_value=0.0, value=0.0, step=10.0)
        angl2 = st.number_input("–ù–∞–ø—Ä—è–º –Ω–∞ –¥–∂–µ—Ä–µ–ª–æ —Å–µ–π—Å–º–æ–º–µ—Ç—Ä–∞ 2, –≥—Ä–∞–¥—É—Å–∏", min_value=0.0, value=0.0, step=10.0)
        angl3 = st.number_input("–ù–∞–ø—Ä—è–º –Ω–∞ –¥–∂–µ—Ä–µ–ª–æ —Å–µ–π—Å–º–æ–º–µ—Ç—Ä–∞ 3, –≥—Ä–∞–¥—É—Å–∏", min_value=0.0, value=0.0, step=10.0)
        series = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É:", list(st.session_state.dfs.keys()),key="select23")
        seismometr = int(st.number_input("–û–±–µ—Ä—ñ—Ç—å —Å–µ–π—Å–º–æ–º–µ—Ç—Ä –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É", min_value=1.0, max_value=3.0, value=1.0, step=1.0))

        VrVz_dict = {}

        for i, (filename, data) in enumerate(st.session_state.dfs.items()):
            # st.write("–§–∞–π–ª ", filename, " —ñ–Ω–¥–µ–∫—Å —Å–µ—Ä—ñ—ó  ", str(i+1))
            # st.subheader(str(i))
            if 'X1' in list(data.columns):
    
                Vr1 = []
                Vr2 = []
                Vr3 = []
                Vz1 = []
                Vz2 = []
                Vz3 = []
                # st.write(i)
                # st.write(filename)
                Vr1.append(ssp.compute_radial(data['X1'], data['Y11'], data['Y12'], angl1))
                Vr2.append(ssp.compute_radial(data['X2'], data['Y21'], data['Y22'], angl2))
                Vr3.append(ssp.compute_radial(data['X3'], data['Y31'], data['Y32'], angl2))
                Vz1.append(data['Z1'])
                Vz2.append(data['Z2'])
                Vz3.append(data['Z3'])
                Vr = {'1':Vr1, '2':Vr2, '3':Vr3}
                Vz = {'1':Vz1, '2':Vz2, '3':Vz3}
                VrVz_dict[filename+'Vr'] = Vr
                VrVz_dict[filename+'Vz'] = Vz
                
                # st.write(filename+'Vr')
                # st.write(filename+'Vz')
                
       
        st.subheader("–ì—Ä–∞—Ñ—ñ–∫ –ì–∞–Ω–∫–µ–ª—è")
        st.plotly_chart(ssp.plot_hankel(np.array(VrVz_dict[series+'Vr'][str(seismometr)])[0], np.array(VrVz_dict[series+'Vz'][str(seismometr)])[0], scale=1.0, mode = 'plotly'),use_container_width=True)
        st.subheader("–ì—Ä–∞—Ñ—ñ–∫ —É—è–≤–Ω–æ—ó –µ–Ω–µ—Ä–≥—ñ—ó")
        st.plotly_chart(ssp.vpf(np.array(VrVz_dict[series+'Vr'][str(seismometr)])[0], np.array(VrVz_dict[series+'Vz'][str(seismometr)])[0], fs, mode='plotly'))

# === –í–∫–ª–∞–¥–∫–∞ 9: –ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∞ –º–æ–¥–µ–ª—å —Å–æ–Ω–∞—Ä–∞ ===
with tab9:
    st.subheader("–ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∞ –º–æ–¥–µ–ª—å —Å–æ–Ω–∞—Ä–∞")

    if len(dfs)>0:

        st.write("C–∏–≥–Ω–∞–ª")
        selected_ser1 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", list(st.session_state.dfs.keys()),key="item91")
        #selected_seism1 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø–∏ –≥–µ–æ—Ñ–æ–Ω—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", ['X1','Y11','Y12','Z1','X2','Y21','Y22','Z2','X3','Y31','Y32','Z3'],key="select12")
        st.write("–®—É–º")
        selected_ser2 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É:", list(st.session_state.dfs.keys()),key="item92")        
        st.write("–°–µ–π—Å–º–æ–º–µ—Ç—Ä –¥–ª—è —è–∫–æ–≥–æ –±—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –∞–Ω–∞–ª—ñ–∑")
        seismometr = int(st.number_input("–û–±–µ—Ä—ñ—Ç—å —Å–µ–π—Å–º–æ–º–µ—Ç—Ä –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É", min_value=1.0, max_value=3.0, value=1.0, step=1.0, key="item93"))

        rho = float(st.number_input("–ì—É—Å—Ç–∏–Ω–∞ –≥—Ä—É–Ω—Ç–∞, –∫–≥/–º¬≥", min_value=0.0, value=2500.0, step=10.0, key="item94"))

        VrVz_dict = {}

        for i, (filename, data) in enumerate(st.session_state.dfs.items()):
            # st.write("–§–∞–π–ª ", filename, " —ñ–Ω–¥–µ–∫—Å —Å–µ—Ä—ñ—ó  ", str(i+1))
            # st.subheader(str(i))
            if 'X1' in list(data.columns):
    
                Vr1 = []
                Vr2 = []
                Vr3 = []
                Vz1 = []
                Vz2 = []
                Vz3 = []
                # st.write(i)
                # st.write(filename)
                Vr1.append(ssp.compute_radial(data['X1'], data['Y11'], data['Y12'], angl1))
                Vr2.append(ssp.compute_radial(data['X2'], data['Y21'], data['Y22'], angl2))
                Vr3.append(ssp.compute_radial(data['X3'], data['Y31'], data['Y32'], angl2))
                Vz1.append(data['Z1'])
                Vz2.append(data['Z2'])
                Vz3.append(data['Z3'])
                Vr = {'1':Vr1, '2':Vr2, '3':Vr3}
                Vz = {'1':Vz1, '2':Vz2, '3':Vz3}
                VrVz_dict[filename+'Vr'] = Vr
                VrVz_dict[filename+'Vz'] = Vz
                
        
        print('tab9')
        print(np.array(VrVz_dict[selected_ser1+'Vr'][str(seismometr)])[0])
        print(np.array(VrVz_dict[selected_ser1+'Vz'][str(seismometr)])[0])
        ls_signal = ssp.energy_density(np.array(VrVz_dict[selected_ser1+'Vr'][str(seismometr)])[0], np.array(VrVz_dict[selected_ser1+'Vz'][str(seismometr)])[0], rho)
        ls_noise = ssp.energy_density(np.array(VrVz_dict[selected_ser2+'Vr'][str(seismometr)])[0], np.array(VrVz_dict[selected_ser2+'Vz'][str(seismometr)])[0], rho)
        
        st.subheader("–©—ñ–ª—å–Ω—ñ—Å—Ç—å –µ–Ω–µ—Ä–≥—ñ—ó –¥–∂–µ—Ä–µ–ª–∞, –î–ë")
        st.subheader(ls_signal)
        st.subheader("–©—ñ–ª—å–Ω—ñ—Å—Ç—å –µ–Ω–µ—Ä–≥—ñ—ó —à—É–º—É, –î–ë")
        st.subheader(ls_noise)
        st.subheader("SNR")
        st.subheader(ls_signal/ls_noise)
    
    